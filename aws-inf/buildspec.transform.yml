version: 0.2

env:
  variables:
    # contains the platform-auth-keycloak repo; not currently ref'd but this buildspec will end up there
    APP_DIR: "app"
    # contains json files with the name of the projects listed in deployspec DependsOn
    DC_ART_DIR: "dc_art"
    # determines if master-users-0.json is included in the transformed input 
    INCLUDE_ADMIN_USER_IMPORT: "false"

phases:
  pre_build:
    commands:
      - echo "loading values from deployment context artifacts $DC_ART_DIR/aws-inf"
      - InfStackName=$(jq -r '.StackName' "$DC_ART_DIR/aws-inf")
      - DoormanMetadataUrl=$(jq -r '.MetadataUrl' "$DC_ART_DIR/doorman")
      - DoormanBaseUrl=$(jq -r '.BaseUrl' "$DC_ART_DIR/doorman")
      - NavexRootDomains=$(jq -r '.NavexRootDomains' "$DC_ART_DIR/global-configuration")
      - |
          AppshellAdminUrl=$(jq -r '.RootUiAdminUrl' "$DC_ART_DIR/appshell-infra")
          AppshellPlatforminatorUrl=$(jq -r '.RootUiNavexAdminUrl' "$DC_ART_DIR/appshell-infra")
          AppshellUserAppUrl=$(jq -r '.RootUiUserAppUrl' "$DC_ART_DIR/appshell-infra")

      - CmdUiRootDomain=$(jq -r '.UiRootDomain' "$DC_ART_DIR/policytech")
      - EpimIemRootDomain=$(jq -r '.UiRootDomain' "$DC_ART_DIR/epim")
      - CoiAuthRedirectUrl=$(jq -r '.CoiAuthRedirectUrl' "$DC_ART_DIR/coi-ui")
      - InsightsApiBaseUrl=$(jq -r '.ApiFriendlyBaseUrl' "$DC_ART_DIR/insights")
      - RiskRateAuthRedirectUrl=$(jq -r '.AuthRedirectUrl' "$DC_ART_DIR/riskrate")
      - NewRelicLicenseKeySsmArn=$(jq -r '.NewRelicenseKeySsmArn' "$DC_ART_DIR/global-configuration")
      - MoonwatchApiBaseUrl=$(jq -r '.Url' "$DC_ART_DIR/moonwatch")
      - MoonwatchApiAccessPolicyArn=$(jq -r '.ApiAccessPolicy' "$DC_ART_DIR/moonwatch")
      - MoonwatchApiRegion=$(jq -r '.AwsRegion' "$DC_ART_DIR/moonwatch")
      - LaunchDarklySdkKeySsmValue=$(jq -r '.LaunchDarklySdkKeySsmArn' "$DC_ART_DIR/global-configuration")
      - mkdir transformed-import
      - | 
        TransformScript="$APP_DIR/aws-inf/realm_transform.py"
        chmod +x $TransformScript
  build:
    commands:
      - |
        if ! $INCLUDE_ADMIN_USER_IMPORT ; then
          # remove any users in the master realm with hard coded credentials
          # should probably do this in navex-realm as well
          echo "Disabling hard coded users from master realm..."
          jq '(.users[] | select(.credentials != []) | .enabled) |= false' $APP_DIR/import/variants/keycloak-app/master-realm.json > master-realm.temp.json
          mv master-realm.temp.json $APP_DIR/import/variants/keycloak-app/master-realm.json
        fi
      - cp $APP_DIR/import/variants/keycloak-app/master-realm.json transformed-import/
      - |
        # TODO: Learn how to actually use either sed or xml with namespaces...
        curl -k $DoormanMetadataUrl | sed 's/xmlns="urn:oasis:names:tc:SAML:2.0:metadata"//g' | sed 's/xmlns="http:\/\/www.w3.org\/2000\/09\/xmldsig#"//g' > doorman-metadata.xml
        CERT=$(xmllint --xpath '/EntityDescriptor/IDPSSODescriptor/KeyDescriptor/KeyInfo/X509Data/X509Certificate/text()' doorman-metadata.xml )
        LOGOUT_URL=$(xmllint --xpath 'string(/EntityDescriptor/IDPSSODescriptor/SingleLogoutService/@Location)' doorman-metadata.xml )
        LOGIN_URL=$(xmllint --xpath 'string(/EntityDescriptor/IDPSSODescriptor/SingleSignOnService/@Location)' doorman-metadata.xml )
      - | 
        # Allow navex root domains in csp
        TransformScript="$APP_DIR/aws-inf/realm_transform.py"
        echo "Running '$TransformScript $NavexRootDomains'"
        chmod +x $TransformScript
        CSP_DOMAINS=$($TransformScript $NavexRootDomains)
        CSP_HEADER="frame-src 'self'; frame-ancestors 'self' $CSP_DOMAINS; object-src 'none';"
      - |
        # TODO: Figure out a less dumb way to update the json file  
        jq --arg CERT "$CERT" '(.identityProviders[] | select(.alias == "doorman") | .config.signingCertificate) |= $CERT' $APP_DIR/import/variants/keycloak-app/navex-realm.json |
          jq --arg LOGOUT_URL "$LOGOUT_URL" '(.identityProviders[] | select(.alias == "doorman") | .config.singleLogoutServiceUrl) |= $LOGOUT_URL' |
          jq --arg LOGIN_URL "$LOGIN_URL" '(.identityProviders[] | select(.alias == "doorman") | .config.singleSignOnServiceUrl) |= $LOGIN_URL' | 
          jq --arg APPSHELL_ADMIN_REDIRECT "$AppshellAdminUrl/*" '(.clients[] | select(.name == "appshell") | .redirectUris[0]) |= $APPSHELL_ADMIN_REDIRECT' |
          jq --arg APPSHELL_ADMIN "$AppshellAdminUrl" '(.clients[] | select(.name == "appshell") | .baseUrl) |= $APPSHELL_ADMIN' |
          jq --arg APPSHELL_PLATFORMINATOR_REDIRECT "$AppshellPlatforminatorUrl/*" '(.clients[] | select(.name == "appshell") | .redirectUris[1]) |= $APPSHELL_PLATFORMINATOR_REDIRECT' |
          jq --arg APPSHELL_PLATFORMINATOR "$AppshellPlatforminatorUrl" '(.clients[] | select(.name == "appshell") | .baseUrl) |= $APPSHELL_PLATFORMINATOR' |
          jq --arg APPSHELL_USER_REDIRECT "$AppshellUserAppUrl/*" '(.clients[] | select(.name == "appshell") | .redirectUris[2]) |= $APPSHELL_USER_REDIRECT' |
          jq --arg APPSHELL_DOORMAN_REDIRECT "${DoormanBaseUrl}/*" '(.clients[] | select(.clientId == "appshell") | .redirectUris[3]) |= $APPSHELL_DOORMAN_REDIRECT' |
          jq --arg APPSHELL_USER "$AppshellUserAppUrl" '(.clients[] | select(.name == "appshell") | .baseUrl) |= $APPSHELL_USER' |
          jq --arg APPSHELL_ADMIN_REDIRECT "$AppshellAdminUrl/*" '(.clients[] | select(.name == "appshell-bff") | .redirectUris[0]) |= $APPSHELL_ADMIN_REDIRECT' |
          jq --arg APPSHELL_ADMIN "$AppshellAdminUrl" '(.clients[] | select(.name == "appshell-bff") | .baseUrl) |= $APPSHELL_ADMIN' |
          jq --arg APPSHELL_PLATFORMINATOR_REDIRECT "$AppshellPlatforminatorUrl/*" '(.clients[] | select(.name == "appshell-bff") | .redirectUris[1]) |= $APPSHELL_PLATFORMINATOR_REDIRECT' |
          jq --arg APPSHELL_PLATFORMINATOR "$AppshellPlatforminatorUrl" '(.clients[] | select(.name == "appshell-bff") | .baseUrl) |= $APPSHELL_PLATFORMINATOR' |
          jq --arg APPSHELL_USER_REDIRECT "$AppshellUserAppUrl/*" '(.clients[] | select(.name == "appshell-bff") | .redirectUris[2]) |= $APPSHELL_USER_REDIRECT' |
          jq --arg APPSHELL_DOORMAN_REDIRECT "${DoormanBaseUrl}/*" '(.clients[] | select(.clientId == "appshell-bff") | .redirectUris[3]) |= $APPSHELL_DOORMAN_REDIRECT' |
          jq --arg APPSHELL_USER "$AppshellUserAppUrl" '(.clients[] | select(.name == "appshell-bff") | .baseUrl) |= $APPSHELL_USER' |
          jq --arg CMDUIROOTDOMAIN "$CmdUiRootDomain" --arg CMDUIROOTDOMAINDEFAULT "$CmdUiRootDomainDefault" '(.clients[] | select(.name == "Content Management and Distribution") | .redirectUris[]) |= sub($CMDUIROOTDOMAINDEFAULT;$CMDUIROOTDOMAIN)' |
          jq --arg CMDUIROOTDOMAIN "$CmdUiRootDomain" --arg CMDUIROOTDOMAINDEFAULT "$CmdUiRootDomainDefault" '(.clients[] | select(.name == "Content Management and Distribution") | .webOrigins[]) |= sub($CMDUIROOTDOMAINDEFAULT;$CMDUIROOTDOMAIN)' |
          jq --arg CMD_DOORMAN_REDIRECT "${DoormanBaseUrl}/*" '(.clients[] | select(.clientId == "cmd-frontend") | .redirectUris[0]) |= $CMD_DOORMAN_REDIRECT' |          
          jq --arg EPIMIEMADMINURL "https://${EpimIemRootDomain}/" '(.clients[] | select(.clientId == "epim-iem") | .adminUrl) |= $EPIMIEMADMINURL' |
          jq --arg EPIMIEMREDIRECTURI "https://${EpimIemRootDomain}/*" '(.clients[] | select(.clientId == "epim-iem") | .redirectUris[0]) |= $EPIMIEMREDIRECTURI' |
          jq --arg EPIM_DOORMAN_REDIRECT "${DoormanBaseUrl}/*" '(.clients[] | select(.clientId == "epim-iem") | .redirectUris[1]) |= $EPIM_DOORMAN_REDIRECT' |
          jq --arg EPIMIEMWEBORIGIN "https://${EpimIemRootDomain}" '(.clients[] | select(.clientId == "epim-iem") | .webOrigins[0]) |= $EPIMIEMWEBORIGIN' |
          jq --arg CSP_HEADER "$CSP_HEADER" '(.browserSecurityHeaders.contentSecurityPolicy) |= $CSP_HEADER' |
          jq --arg COIREDIRECTURI "${CoiAuthRedirectUrl}/*" '(.clients[] | select(.clientId == "coi") | .redirectUris[0]) |= $COIREDIRECTURI' |
          jq --arg COI_DOORMAN_REDIRECTURI "${DoormanBaseUrl}/*" '(.clients[] | select(.clientId == "coi") | .redirectUris[2]) |= $COI_DOORMAN_REDIRECTURI' |
          jq --arg INREDIRECTURI "${InsightsApiBaseUrl}/public/v2/BrowserAuthorization.*" '(.clients[] | select(.clientId == "insights") | .redirectUris[0]) |= $INREDIRECTURI' |
          jq --arg INDOORMANREDIRECTURI "${DoormanBaseUrl}/*" '(.clients[] | select(.clientId == "insights") | .redirectUris[1]) |= $INDOORMANREDIRECTURI' |
          jq --arg RRREDIRECTURI "${RiskRateAuthRedirectUrl}/*" '(.clients[] | select(.clientId == "riskrate") | .redirectUris[0]) |= $RRREDIRECTURI' |
          jq --arg RRDOORMANREDIRECTURI "${DoormanBaseUrl}/*" '(.clients[] | select(.clientId == "riskrate") | .redirectUris[1]) |= $RRDOORMANREDIRECTURI' |
          jq --arg CSP_HEADER "$CSP_HEADER" '(.attributes."_browser_header.contentSecurityPolicy") |= $CSP_HEADER' > transformed-import/navex-realm.json
      - |
        jq --null-input \
          --arg InfrastructureStackName "$InfStackName" \
          --arg NewRelicLicenseKeySsmArn "$NewRelicLicenseKeySsmArn" \
          --arg MoonwatchApiBaseUrl "$MoonwatchApiBaseUrl" \
          --arg MoonwatchApiAccessPolicyArn "$MoonwatchApiAccessPolicyArn" \
          --arg MoonwatchApiRegion "$MoonwatchApiRegion" \
          --arg LaunchDarklySdkKeySsmValue "$LaunchDarklySdkKeySsmValue" \
          '{
            "Parameters": {
              "InfrastructureStackName": $InfrastructureStackName,
              "NewRelicLicenseKeySsmArn": $NewRelicLicenseKeySsmArn,
              "MoonwatchApiBaseUrl": $MoonwatchApiBaseUrl,
              "MoonwatchApiAccessPolicyArn": $MoonwatchApiAccessPolicyArn,
              "MoonwatchApiRegion": $MoonwatchApiRegion,
              "LaunchDarklySdkKeySsmValue": $LaunchDarklySdkKeySsmValue
            }
          }' > \
          ./template-configuration.json
artifacts:
  files:
    - "template-configuration.json"
    - "transformed-import/*.json"
