version: 0.2

env:
  variables:
    # contains the platform-auth-keycloak repo; not currently ref'd but this buildspec will end up there
    APP_DIR: "app"
    # contains json files with the name of the projects listed in deployspec DependsOn
    DC_ART_DIR: "dc_art"
    # Deployspec file with the generated Version tacked on
    BUILD_INFO_FILE: "build_info/build-record.json"
    # determines if master-users-0.json is included in the transformed input 
    INCLUDE_ADMIN_USER_IMPORT: "false"

phases:
  install:
    runtime-versions:
      nodejs: 12
  pre_build:
    commands:
      - ProjectName=$(jq -r '.Project' $BUILD_INFO_FILE)
      - ProjectVersion=$(jq -r '.Version' $BUILD_INFO_FILE)
      - echo "loading values from deployment context artifacts $DC_ART_DIR/aws-inf"
      - InfStackName=$(jq -r '.StackName' "$DC_ART_DIR/aws-inf")
      - DoormanMetadataUrl=$(jq -r '.MetadataPublicMirrorUrl' "$DC_ART_DIR/doorman")
      - DoormanBaseUrl=$(jq -r '.BaseUrl' "$DC_ART_DIR/doorman")
      - |
          # I think this handles a default value if the artifact is missing or if the entire json file is
          AppshellAdminUrlDefault="http://admin.devlocal.navex-pe.com:3000"
          AppshellAdminUrl=$(jq --arg DEFAULT "$AppshellAdminUrlDefault" -r '.RootUiAdminUrl // $DEFAULT' "$DC_ART_DIR/appshell-infra" || echo "$AppshellAdminUrlDefault")
          AppshellPlatforminatorUrlDefault="http://navexadmin.devlocal.navex-pe.com:3000"
          AppshellPlatforminatorUrl=$(jq --arg DEFAULT "$AppshellPlatforminatorUrlDefault" -r '.RootUiNavexAdminUrl // $DEFAULT' "$DC_ART_DIR/appshell-infra" || echo "$AppshellPlatforminatorUrlDefault")
          AppshellUserAppUrlDefault="http://user.app.devlocal.navex-pe.com:3000"
          AppshellUserAppUrl=$(jq --arg DEFAULT "$AppshellUserAppUrlDefault" -r '.RootUiUserAppUrl // $DEFAULT' "$DC_ART_DIR/appshell-infra" || echo "$AppshellUserAppUrlDefault")

      - |
          CmdUiRootDomainDefault="pt.dev.local"
          CmdUiRootDomain=$(jq --arg DEFAULT "$CmdUiRootDomainDefault" -r '.UiRootDomain // $DEFAULT' "$DC_ART_DIR/policytech" || echo "$CmdUiRootDomainDefault")
      - |
          EpimIemRootDomainDefault="dev.ep.local"
          EpimIemRootDomain=$(jq --arg DEFAULT "$EpimIemRootDomainDefault" -r '.UiRootDomain // $DEFAULT' "$DC_ART_DIR/epim" || echo "$EpimIemRootDomainDefault")
      - |
          CoiAuthRedirectUrlDefault="https://auth.coi.devlocal.navex-pe.com"
          CoiAuthRedirectUrl=$(jq --arg DEFAULT "$CoiAuthRedirectUrlDefault" -r '.CoiAuthRedirectUrl // $DEFAULT' "$DC_ART_DIR/coi-ui" || echo "$CoiAuthRedirectUrlDefault")
      - |
          InsightsAuthRedirectUrlDefault="https://api.dev.insights.local"
          InsightsAuthRedirectUrl=$(jq --arg DEFAULT "$InsightsAuthRedirectUrlDefault" -r '.InsightsAuthRedirectUrlDefault // $DEFAULT' "$DC_ART_DIR/in-ui" || echo "$InsightsAuthRedirectUrlDefault")
      - mkdir transformed-import
  build:
    commands:
      - |
        if ! $INCLUDE_ADMIN_USER_IMPORT ; then
          # remove any users in the master realm with hard coded credentials
          # should probably do this in navex-realm as well
          echo "Removing hard coded users from master realm..."
          jq 'del(.users[] | select(.credentials != []))' $APP_DIR/import/master-realm.json > master-realm.temp.json
          mv master-realm.temp.json $APP_DIR/import/master-realm.json
        fi
      - cp $APP_DIR/import/master-realm.json transformed-import/
      - |
        # TODO: Learn how to actually use either sed or xml with namespaces...
        curl -k $DoormanMetadataUrl | sed 's/xmlns="urn:oasis:names:tc:SAML:2.0:metadata"//g' | sed 's/xmlns="http:\/\/www.w3.org\/2000\/09\/xmldsig#"//g' > doorman-metadata.xml
        CERT=$(xmllint --xpath '/EntityDescriptor/IDPSSODescriptor/KeyDescriptor/KeyInfo/X509Data/X509Certificate/text()' doorman-metadata.xml )
        LOGOUT_URL=$(xmllint --xpath 'string(/EntityDescriptor/IDPSSODescriptor/SingleLogoutService/@Location)' doorman-metadata.xml )
        LOGIN_URL=$(xmllint --xpath 'string(/EntityDescriptor/IDPSSODescriptor/SingleSignOnService/@Location)' doorman-metadata.xml )
        CSP_HEADER="frame-src 'self'; frame-ancestors 'self' $DoormanBaseUrl; object-src 'none';"
      - |
        # TODO: Figure out a less dumb way to update the json file  
        jq --arg CERT "$CERT" '(.identityProviders[] | select(.alias == "doorman") | .config.signingCertificate) |= $CERT' $APP_DIR/import/navex-realm.json |
          jq --arg LOGOUT_URL "$LOGOUT_URL" '(.identityProviders[] | select(.alias == "doorman") | .config.singleLogoutServiceUrl) |= $LOGOUT_URL' |
          jq --arg LOGIN_URL "$LOGIN_URL" '(.identityProviders[] | select(.alias == "doorman") | .config.singleSignOnServiceUrl) |= $LOGIN_URL' | 
          jq --arg APPSHELL_ADMIN_REDIRECT "$AppshellAdminUrl/*" '(.clients[] | select(.name == "appshell") | .redirectUris[0]) |= $APPSHELL_ADMIN_REDIRECT' |
          jq --arg APPSHELL_ADMIN "$AppshellAdminUrl" '(.clients[] | select(.name == "appshell") | .baseUrl) |= $APPSHELL_ADMIN' |
          jq --arg APPSHELL_PLATFORMINATOR_REDIRECT "$AppshellPlatforminatorUrl/*" '(.clients[] | select(.name == "appshell") | .redirectUris[1]) |= $APPSHELL_PLATFORMINATOR_REDIRECT' |
          jq --arg APPSHELL_PLATFORMINATOR "$AppshellPlatforminatorUrl" '(.clients[] | select(.name == "appshell") | .baseUrl) |= $APPSHELL_PLATFORMINATOR' |
          jq --arg APPSHELL_USER_REDIRECT "$AppshellUserAppUrl/*" '(.clients[] | select(.name == "appshell") | .redirectUris[2]) |= $APPSHELL_USER_REDIRECT' |
          jq --arg APPSHELL_USER "$AppshellUserAppUrl" '(.clients[] | select(.name == "appshell") | .baseUrl) |= $APPSHELL_USER' |
          jq --arg CMDUIROOTDOMAIN "$CmdUiRootDomain" --arg CMDUIROOTDOMAINDEFAULT "$CmdUiRootDomainDefault" '(.clients[] | select(.name == "Content Management and Distribution") | .redirectUris[]) |= sub($CMDUIROOTDOMAINDEFAULT;$CMDUIROOTDOMAIN)' |
          jq --arg CMDUIROOTDOMAIN "$CmdUiRootDomain" --arg CMDUIROOTDOMAINDEFAULT "$CmdUiRootDomainDefault" '(.clients[] | select(.name == "Content Management and Distribution") | .webOrigins[]) |= sub($CMDUIROOTDOMAINDEFAULT;$CMDUIROOTDOMAIN)' |
          jq --arg EPIMIEMADMINURL "https://${EpimIemRootDomain}/" '(.clients[] | select(.clientId == "epim-iem") | .adminUrl) |= $EPIMIEMADMINURL' |
          jq --arg EPIMIEMREDIRECTURI "https://${EpimIemRootDomain}/*" '(.clients[] | select(.clientId == "epim-iem") | .redirectUris[0]) |= $EPIMIEMREDIRECTURI' |
          jq --arg EPIMIEMWEBORIGIN "https://${EpimIemRootDomain}" '(.clients[] | select(.clientId == "epim-iem") | .webOrigins[0]) |= $EPIMIEMWEBORIGIN' |
          jq --arg CSP_HEADER "$CSP_HEADER" '(.browserSecurityHeaders.contentSecurityPolicy) |= $CSP_HEADER' |
          jq --arg COIREDIRECTURI "${CoiAuthRedirectUrl}/*" '(.clients[] | select(.clientId == "coi") | .redirectUris[0]) |= $COIREDIRECTURI' |
          jq --arg INREDIRECTURI "${InsightsAuthRedirectUrl}/*" '(.clients[] | select(.clientId == "in") | .redirectUris[0]) |= $INREDIRECTURI' |
          jq --arg CSP_HEADER "$CSP_HEADER" '(.attributes."_browser_header.contentSecurityPolicy") |= $CSP_HEADER' > transformed-import/navex-realm.json
      - |
        jq --null-input \
          --arg InfrastructureStackName "$InfStackName" \
          --arg ProjectName "$ProjectName" \
          --arg ProjectVersion "$ProjectVersion" \
          '{
            "Parameters": {
              "InfrastructureStackName": $InfrastructureStackName
            },
            "Tags": {
              "navex:project:name": $ProjectName,
              "navex:project:version": $ProjectVersion,
              "navex:project:owner": "cia"
            }
          }' > \
          ./template-configuration.json
artifacts:
  files:
    - "template-configuration.json"
    - "transformed-import/*.json"
