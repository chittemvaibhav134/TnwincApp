version: 0.2

env:
  variables:
    # contains the platform-auth-keycloak repo; not currently ref'd but this buildspec will end up there
    APP_DIR: "app"
    # contains json files with the name of the projects listed in deployspec DependsOn
    DC_ART_DIR: "dc_art"
    # determines if master-users-0.json is included in the transformed input
    INCLUDE_ADMIN_USER_IMPORT: "false"

phases:
  pre_build:
    commands:
      - echo "loading values from deployment context artifacts $DC_ART_DIR/aws-inf"
      - InfStackName=$(jq -r '.StackName' "$DC_ART_DIR/aws-inf")
      - DoormanMetadataUrl=$(jq -r '.MetadataUrl' "$DC_ART_DIR/doorman")
      - DoormanBaseUrl=$(jq -r '.BaseUrl' "$DC_ART_DIR/doorman")
      - Auth0Domain=$(jq -r '.authDomain_value' "$DC_ART_DIR/auth0-global-configuration")
      - NavexRootDomains=$(jq -r '.NavexRootDomains' "$DC_ART_DIR/global-configuration")
      - |
          AppshellAdminUrl=$(jq -r '.RootUiAdminUrl' "$DC_ART_DIR/appshell-infra")
          AppshellPlatforminatorUrl=$(jq -r '.RootUiNavexAdminUrl' "$DC_ART_DIR/appshell-infra")
          AppshellUserAppUrl=$(jq -r '.RootUiUserAppUrl' "$DC_ART_DIR/appshell-infra")
      - PiralAppshellUrls=$(jq -r '.Urls' "$DC_ART_DIR/piral-shell-standard")

      - CmdUiRootDomain=$(jq -r '.UiRootDomain' "$DC_ART_DIR/policytech")
      - EpimIemRootDomain=$(jq -r '.UiRootDomain' "$DC_ART_DIR/epim")
      - CoiAuthRedirectUrl=$(jq -r '.CoiAuthRedirectUrl' "$DC_ART_DIR/coi-ui")
      - CoiApiUrl=$(jq -r '.Url' "$DC_ART_DIR/coi-api")
      - InsightsApiBaseUrl=$(jq -r '.ApiFriendlyBaseUrl' "$DC_ART_DIR/insights")
      - RiskRateAuthRedirectUrl=$(jq -r '.AuthRedirectUrl' "$DC_ART_DIR/riskrate")
      - NewRelicLicenseKeySsmArn=$(jq -r '.NewRelicenseKeySsmArn' "$DC_ART_DIR/global-configuration")
      - MoonwatchApiBaseUrl=$(jq -r '.Url' "$DC_ART_DIR/moonwatch")
      - MoonwatchApiAccessPolicyArn=$(jq -r '.ApiAccessPolicy' "$DC_ART_DIR/moonwatch")
      - MoonwatchApiRegion=$(jq -r '.AwsRegion' "$DC_ART_DIR/moonwatch")
      - LaunchDarklySdkKeySsmValue=$(jq -r '.LaunchDarklySdkKeySsmArn' "$DC_ART_DIR/global-configuration")
      - EpadminRootDomain=$(jq -r '.UiRootDomain' "$DC_ART_DIR/epim-standard-epadmin")
      - CcAuthRedirectUrl=$(jq -r '.ApiBaseUrl' "$DC_ART_DIR/ng-learning-platform")
      - EsgAuthRedirectUrl=$(jq -r '.BaseRedirectUrl' "$DC_ART_DIR/esg")
      - EsgFrontendAuthRedirectUrl=$(jq -r '.FrontendBaseUrl' "$DC_ART_DIR/navex-esg-backend-api")
      - SingleDomain=$(jq -r '.SingleDomain' "$DC_ART_DIR/global-configuration")
      - PitaUrl=$(jq -r '.ApiURL' "$DC_ART_DIR/pita")
      - mkdir transformed-import
      - |
        TransformScript="$APP_DIR/aws-inf/realm_transform.py"
        chmod +x $TransformScript
      - NavexRealmJson="$APP_DIR/import/variants/keycloak-app/navex-realm.json"
      - MasterRealmJson="$APP_DIR/import/variants/keycloak-app/master-realm.json"
  build:
    commands:
      - |
        if ! $INCLUDE_ADMIN_USER_IMPORT ; then
          # remove any users in the realm files with hard coded credentials
          $TransformScript -r "$MasterRealmJson" -i --disable-users
          $TransformScript -r "$NavexRealmJson" -i --disable-users
        fi
      # copy updated realm file to captured artifact dir
      - cp "$MasterRealmJson" transformed-import/master-realm.json
      # Set idp config off of doorman metadata
      - $TransformScript -r "$NavexRealmJson" -i --idp-alias doorman --idp-metadata-url $DoormanMetadataUrl

      # Set CSP header to allow navex root domains. Script will parse the comma delimited list that NavexRootDomains is
      - $TransformScript -r "$NavexRealmJson" -i --csp-header "$NavexRootDomains" --wildcard-prefix

      # Set appshell client related urls
      - $TransformScript -r "$NavexRealmJson" -i --client-id appshell -p redirectUris -v "$AppshellAdminUrl/*" -v "$AppshellPlatforminatorUrl/*" -v "$AppshellUserAppUrl/*" -v "${DoormanBaseUrl}/*" -v "https://auth.${SingleDomain}/*"
      - $TransformScript -r "$NavexRealmJson" -i --client-id appshell -p baseUrl -v "$AppshellUserAppUrl"

      # Set navexone client related urls
      # This part will have to change if we ever add more apps to AppShell/NavexOne
      - PiralAppshellNavexOneUrl=${PiralAppshellUrls##*,}
      - $TransformScript -r "$NavexRealmJson" -i --client-id navexone -p redirectUris -v "$PiralAppshellNavexOneUrl/*" -v "${DoormanBaseUrl}/*" -v "https://auth.${SingleDomain}/*"
      - $TransformScript -r "$NavexRealmJson" -i --client-id navexone -p baseUrl -v "$PiralAppshellNavexOneUrl"

      # Set navexadmin client related urls
      - PiralAppshellPlatforminatorUrl=${PiralAppshellUrls%%,*}
      - $TransformScript -r "$NavexRealmJson" -i --client-id navexadmin -p redirectUris -v "$PiralAppshellPlatforminatorUrl/*" -v "${DoormanBaseUrl}/*" -v "https://auth.${SingleDomain}/*"
      - $TransformScript -r "$NavexRealmJson" -i --client-id navexadmin -p baseUrl -v "$PiralAppshellPlatforminatorUrl"

      # Set appshell-bff client related urls
      - $TransformScript -r "$NavexRealmJson" -i --client-id appshell-bff -p redirectUris -v "$AppshellAdminUrl/*" -v "$AppshellPlatforminatorUrl/*" -v "$AppshellUserAppUrl/*" -v "${DoormanBaseUrl}/*" -v "https://auth.${SingleDomain}/*" -v "$PiralAppshellPlatforminatorUrl/*"
      - $TransformScript -r "$NavexRealmJson" -i --client-id appshell-bff -p baseUrl -v "$AppshellUserAppUrl"
      - $TransformScript -r "$NavexRealmJson" -i --client-id appshell-bff -p attributes:backchannel.logout.url -v "$AppshellAdminUrl/auth/backchannel-logout"
      
      # Set cmd-backend client related urls
      - $TransformScript -r "$NavexRealmJson" -i --client-id cmd-backend -p redirectUris -v "https://maint.$CmdUiRootDomain/oidc/coderedirector/*" -v "${DoormanBaseUrl}/*"
      - $TransformScript -r "$NavexRealmJson" -i --client-id cmd-backend -p attributes:backchannel.logout.url -v "https://maint.$CmdUiRootDomain/oidc/backchannellogout"

      # Set epim-iem client related urls
      - $TransformScript -r "$NavexRealmJson" -i --client-id epim-iem -p adminUrl -v "https://${EpimIemRootDomain}/"
      - $TransformScript -r "$NavexRealmJson" -i --client-id epim-iem -p redirectUris -v "https://${EpimIemRootDomain}/*" -v "${DoormanBaseUrl}/*" -v "https://auth.${SingleDomain}/oidcredirect/*"
      - $TransformScript -r "$NavexRealmJson" -i --client-id epim-iem -p webOrigins -v "https://${EpimIemRootDomain}"
      - $TransformScript -r "$NavexRealmJson" -i --client-id epim-iem -p rootUrl -v "https://${EpimIemRootDomain}/"
      - $TransformScript -r "$NavexRealmJson" -i --client-id epim-iem -p attributes:backchannel.logout.url -v "https://auth.${SingleDomain}/incidents/authorization/authoidc/backchannellogout"
      
      # Set epadmin client related urls 
      - $TransformScript -r "$NavexRealmJson" -i --client-id epadmin -p adminUrl -v "https://${EpadminRootDomain}/" 
      - $TransformScript -r "$NavexRealmJson" -i --client-id epadmin -p redirectUris -v "https://${EpadminRootDomain}/*" -v "${DoormanBaseUrl}/*"
      - $TransformScript -r "$NavexRealmJson" -i --client-id epadmin -p rootUrl -v "https://${EpadminRootDomain}/"
      - $TransformScript -r "$NavexRealmJson" -i --client-id epadmin -p webOrigins -v "https://${EpadminRootDomain}"

      # Set course customizer client related urls
      - $TransformScript -r "$NavexRealmJson" -i --client-id coursecustomizer -p redirectUris -v "${CcAuthRedirectUrl}/*" -v "${DoormanBaseUrl}/*" -v "https://auth.${SingleDomain}/course-customizer/*"
      - $TransformScript -r "$NavexRealmJson" -i --client-id coursecustomizer -p attributes:backchannel.logout.url -v "https://auth.${SingleDomain}/course-customizer/api/login/BackChannelLogout"
            
      # Set esg client related urls
      - $TransformScript -r "$NavexRealmJson" -i --client-id navex-esg -p redirectUris -v "${EsgAuthRedirectUrl}/*" -v "${EsgFrontendAuthRedirectUrl}/*" -v "${DoormanBaseUrl}/*"

      # Set coi client related urls
      - $TransformScript -r "$NavexRealmJson" -i --client-id coi -p redirectUris -v "${CoiAuthRedirectUrl}/*" -v "https://auth.${SingleDomain}/disclosures/*"
      - $TransformScript -r "$NavexRealmJson" -i --client-id coi -p attributes:backchannel.logout.url -v "$CoiApiUrl/public/v6/sessions.backChannelLogout"

      # Set insights client related urls
      - $TransformScript -r "$NavexRealmJson" -i --client-id insights -p redirectUris -v "${InsightsApiBaseUrl}/public/v2/BrowserAuthorization.*" -v "${InsightsApiBaseUrl}/public/v3/BrowserAuthorization.*" -v "${DoormanBaseUrl}/*" -v "https://apigw.${SingleDomain}/analytics/api/public/v2/BrowserAuthorization.*" -v "https://apigw.${SingleDomain}/analytics/api/public/v3/BrowserAuthorization.*"
      - $TransformScript -r "$NavexRealmJson" -i --client-id insights -p attributes:backchannel.logout.url -v "${InsightsApiBaseUrl}/public/v1/Session.BackChannelLogout"
      
      # Set riskrate client related urls
      - $TransformScript -r "$NavexRealmJson" -i --client-id riskrate -p redirectUris -v "${RiskRateAuthRedirectUrl}/*" -v "${DoormanBaseUrl}/*"
      # riskrate wants to use the preview KC instance for an additional environment and the easiest way to accomplish this hacky goal is to
      # add the redirectUri for that env in all environments. Not ideal, but an easy way to make it happen...
      - $TransformScript -r "$NavexRealmJson" -i --client-id riskrate -p redirectUris -v "https://auth.rr.navexglobalpreview.com/auth/*" --append
      - $TransformScript -r "$NavexRealmJson" -i --client-id riskrate -p attributes:backchannel.logout.url -v "${RiskRateAuthRedirectUrl}/PerformBackChannelLogout"

      # Set pita client related urls
      - $TransformScript -r "$NavexRealmJson" -i --client-id pita -p redirectUris -v "https://$PitaUrl/*" 
      - $TransformScript -r "$NavexRealmJson" -i --client-id pita -p attributes:backchannel.logout.url -v "https://$PitaUrl/api/oidc/logout"

      # copy updated realm file to captured artifact dir
      - cp "$NavexRealmJson" transformed-import/navex-realm.json

      - |
        jq --null-input \
          --arg InfrastructureStackName "$InfStackName" \
          --arg NewRelicLicenseKeySsmArn "$NewRelicLicenseKeySsmArn" \
          --arg MoonwatchApiBaseUrl "$MoonwatchApiBaseUrl" \
          --arg MoonwatchApiAccessPolicyArn "$MoonwatchApiAccessPolicyArn" \
          --arg MoonwatchApiRegion "$MoonwatchApiRegion" \
          --arg LaunchDarklySdkKeySsmValue "$LaunchDarklySdkKeySsmValue" \
          '{
            "Parameters": {
              "InfrastructureStackName": $InfrastructureStackName,
              "NewRelicLicenseKeySsmArn": $NewRelicLicenseKeySsmArn,
              "MoonwatchApiBaseUrl": $MoonwatchApiBaseUrl,
              "MoonwatchApiAccessPolicyArn": $MoonwatchApiAccessPolicyArn,
              "MoonwatchApiRegion": $MoonwatchApiRegion,
              "LaunchDarklySdkKeySsmValue": $LaunchDarklySdkKeySsmValue
            }
          }' > \
          ./template-configuration.json
      # Create artifact for the Auth0Domain
      - |
        jq --null-input \
          --arg Auth0Domain "$Auth0Domain" \
          '{
            "Parameters": {
              "Auth0Domain": $Auth0Domain
            }
          }' > \
          ./template-auth-configuration.json
      
artifacts:
  files:
    - "template-configuration.json"
    - "template-auth-configuration.json"
    - "transformed-import/*.json"
