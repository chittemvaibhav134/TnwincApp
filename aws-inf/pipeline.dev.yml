AWSTemplateFormatVersion: 2010-09-09

Description: >
  Pipeline for unstable keycloak deployments

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Names"
        Parameters:
          - ProjectName
          - SubDomain
      - Label:
          default: "Build Configuration"
        Parameters:
          - GitHubBranch
          - ImportConfigVariant
          - Auth0Domain
      - Label:
          default: "Moonwatch"
        Parameters:
          - MoonwatchApiRegion
          - MoonwatchApiBaseUrl
          - MoonwatchApiAccessPolicyArn
      - Label:
          default: "Configuration you might need to change"
        Parameters:
          - LaunchDarklySdkKeySsmValue
          - LambdaUpdateTrigger
      - Label:
          default: "DNS Configuration you probably don't need to change"
        Parameters:
          - DnsHostedZone
          - DnsHostedZoneID

Parameters:
  ProjectName:
    Type: String
    Default: keycloak
    Description: Prefix to the name of the stack that will be created and updated by this pipeline
  GitHubBranch:
    Type: String
    Default: develop
    Description: The pipeline will deploy code from this branch of the platform-auth-keycloak repo on GitHub
  ImportConfigVariant:
    Type: String
    Default: "DevMock"
    AllowedValues:
      - DevMock
      - KeycloakApp
    Description: Selects which configuration should be imported by the deployed stack
  SubDomain:
    Type: String
    Description: Custom subdomain to appear in the URL that will point to the built KeyCloak instance
  DnsHostedZone:
    Type: String
    Default: navex-dev.com
    Description: The top-level domain where the built KeyCloak instance will be hosted
  DnsHostedZoneID:
    Type: String
    Default: Z2MMPRIXFHA7UM
    Description: The ID of the hosted zone that contains the record for the top-level domain DnsHostedZone
  LaunchDarklySdkKeySsmValue:
    Type: String
    Default: arn:aws:ssm:us-west-2:552242929734:parameter/launch-darkly
    Description: >
      ARN for the SSM value that contains the LaunchDarkly SDK key to use for checking LaunchDarkly feature flags.
      The default value works for the us-west-2 region; you must change this to suit the region you are deploying to.
  MoonwatchApiAccessPolicyArn:
    Type: String
    Description: The ApiAccessPolicy output from the moonwatch-api stack the KeyCloak instance will link to
  MoonwatchApiBaseUrl:
    Type: String
    Description: The Url output from the moonwatch-api stack the KeyCloak instance will link to
  MoonwatchApiRegion:
    Type: String
    Description: The region of the moonwatch-api stack in the KeyCloak instance will link to
  LambdaUpdateTrigger:
    Type: "AWS::SSM::Parameter::Value<String>"
    Default: "/mobile/ssm-update-trigger"
    Description: Unique value to force lambda execution
  LayerName:
    Type: String
    Default: oidc-endpoint-authorizer-nodejs
  RotateClientSecret:
    Type: String
    Default: "No"
    AllowedValues:
      - "Yes"
      - "No"
  Auth0Domain:
    Type: String

Conditions:
  DevMock: !Equals [ !Ref ImportConfigVariant, "DevMock" ]
  RotateClientSecret: !Equals [!Ref RotateClientSecret, "Yes"]

Resources:
  GitHubTokenSsm:
    Type: Custom::SsmGetParameter
    Properties:
      Name: /mobile/github-access-token
      UpdateTrigger: !Ref LambdaUpdateTrigger
      ServiceToken: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:cloudformation-get-ssm-param

  NavexKcContainerRepository:
    Type: AWS::ECR::Repository
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain
    Properties:
      LifecyclePolicy:
        LifecyclePolicyText: |
          {"rules":[
            {
              "rulePriority":1,
              "description":"Expire images older than 14 days",
              "selection":{
                "tagStatus":"untagged","countType":"sinceImagePushed","countUnit":"days","countNumber":14
              },
              "action":{"type":"expire"}
            }
          ]}

  KCCodeBuild:
    Type: AWS::CodeBuild::Project
    Properties:
      ServiceRole: !Ref CodePipelineServiceRole
      Description: Builds the keycloak project
      Artifacts:
        Type: CODEPIPELINE
      Source:
        Type: CODEPIPELINE
        BuildSpec: aws-inf/buildspec.yml
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:4.0
        Type: LINUX_CONTAINER
        PrivilegedMode: True
        EnvironmentVariables:
          - Name: ECR_REGION
            Value: !Ref AWS::Region
          - Name: REPOSITORY_URI
            Value: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${NavexKcContainerRepository}

  TransformCodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      ServiceRole: !Ref CodePipelineServiceRole
      Description: Transforms / merges dc artifacts into template-configuration.json
      Artifacts:
        Type: CODEPIPELINE
      Source:
        Type: CODEPIPELINE
        BuildSpec: !If [ DevMock, 'aws-inf/buildspec.devmocktransform.yml', 'aws-inf/buildspec.devtransform.yml' ]
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:7.0
        Type: LINUX_CONTAINER

  PackageCodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      ServiceRole: !Ref CodePipelineServiceRole
      Description: Packages various cfn customresource
      Artifacts:
        Type: CODEPIPELINE
      Source:
        Type: CODEPIPELINE
        BuildSpec: aws-inf/buildspec.package.yml
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:4.0
        Type: LINUX_CONTAINER
        EnvironmentVariables:
          - Name: S3_BUCKET
            Value: !Sub keycloak-dev-artifacts-${AWS::Region}
          - Name: S3_PREFIX
            Value: !Ref AWS::StackName
          - Name: S3_Region
            Value: !Ref AWS::Region

  AuthPackageCodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      ServiceRole: !Ref CodePipelineServiceRole
      Description: Packages keycloak lambdas
      Artifacts:
        Type: CODEPIPELINE
      Source:
        Type: CODEPIPELINE
        BuildSpec: aws-inf/buildspec.auth.package.yml
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:7.0
        Type: LINUX_CONTAINER
        EnvironmentVariables:
          - Name: S3_BUCKET
            Value: !Sub keycloak-dev-artifacts-${AWS::Region}
          - Name: S3_PREFIX
            Value: !Ref AWS::StackName
          - Name: S3_Region
            Value: !Ref AWS::Region

  PipelineWebhook:
    Type: AWS::CodePipeline::Webhook
    Properties:
      Authentication: GITHUB_HMAC
      AuthenticationConfiguration:
        SecretToken: !GetAtt GitHubTokenSsm.Parameter.Value
      Filters:
        -
          JsonPath: "$.ref"
          MatchEquals: !Sub "refs/heads/${GitHubBranch}"
      TargetPipeline: !Ref Pipeline
      TargetAction: App
      Name: !Ref AWS::StackName
      TargetPipelineVersion: !GetAtt Pipeline.Version
      RegisterWithThirdParty: true

  Pipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: !Ref AWS::StackName
      RoleArn: !GetAtt CodePipelineServiceRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Sub keycloak-dev-artifacts-${AWS::Region}
      Stages:
        - Name: Source
          Actions:
            - Name: App
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Version: "1"
                Provider: GitHub
              Configuration:
                Owner: tnwinc
                Repo: platform-auth-keycloak
                Branch: !Ref GitHubBranch
                OAuthToken: !GetAtt GitHubTokenSsm.Parameter.Value
                PollForSourceChanges: false
              OutputArtifacts:
                - Name: App
              RunOrder: 1
        - Name: Build
          Actions:
            -
              Name: Build
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: "1"
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref KCCodeBuild
              InputArtifacts:
                - Name: App
              OutputArtifacts:
                - Name: BuildOutput
              RunOrder: 1
            -
              Name: Package
              Region: !Ref AWS::Region
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: "1"
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref PackageCodeBuildProject
              InputArtifacts:
                - Name: App
              OutputArtifacts:
                - Name: Package
              RunOrder: 2
            -
              Name: AuthPackage
              Region: !Ref AWS::Region
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: "1"
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref AuthPackageCodeBuildProject
              InputArtifacts:
                - Name: App
              OutputArtifacts:
                - Name: AuthPackage
              RunOrder: 3
        -
          Name: Dev
          Actions:
            -
              Name: Transform_Dev
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: "1"
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref TransformCodeBuildProject
              InputArtifacts:
                - Name: App
              OutputArtifacts:
                - Name: Transform_Dev
              RunOrder: 1
            -
              Name: CfnDeploy_Dev
              Region: !Ref AWS::Region
              RoleArn: !GetAtt CodePipelineServiceRole.Arn
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: "1"
                Provider: CloudFormation
              Configuration:
                ActionMode: CREATE_UPDATE
                Capabilities: CAPABILITY_IAM,CAPABILITY_AUTO_EXPAND
                RoleArn: !GetAtt CodePipelineServiceRole.Arn
                StackName: !Sub ${ProjectName}-${AWS::StackName}-dev-app
                TemplatePath: "Package::app.packaged.yml"
                TemplateConfiguration: "BuildOutput::template-configuration.json"
                ParameterOverrides: !Sub |
                  {
                    "Subdomain": "${SubDomain}",
                    "DnsHostedZone": "${DnsHostedZone}",
                    "DnsHostedZoneId": "${DnsHostedZoneID}",
                    "InfrastructureStackName": "aws-inf-shared",
                    "LaunchDarklySdkKeySsmValue": "${LaunchDarklySdkKeySsmValue}",
                    "MoonwatchApiAccessPolicyArn": "${MoonwatchApiAccessPolicyArn}",
                    "MoonwatchApiBaseUrl": "${MoonwatchApiBaseUrl}",
                    "MoonwatchApiRegion": "${MoonwatchApiRegion}",
                    "Stage" : "Development",
                    "RotateClientSecret": "${RotateClientSecret}"
                  }
                OutputFileName: stack-outputs.json
              InputArtifacts:
                - Name: Package
                - Name: BuildOutput
              OutputArtifacts:
                - Name: CfnDeploy_Dev
              RunOrder: 2
            -
              Name: ConfigUpload_Dev
              ActionTypeId:
                Category: Invoke
                Owner: AWS
                Version: "1"
                Provider: Lambda
              InputArtifacts:
                - Name: CfnDeploy_Dev
                - Name: Transform_Dev
              Configuration:
                FunctionName: CPS3Deploy
                UserParameters: !Sub |
                  {
                    "S3BucketName": "CfnDeploy_Dev::stack-outputs.json:ConfigBucket",
                    "BaseDirectory": "transformed-import",
                    "PurgeDirectories": "enabled",
                    "ExcludeArtifactsFromUpload": ["CfnDeploy_Dev"],
                    "Region": "${AWS::Region}"
                  }
              RunOrder: 3
            -
              Name: FinalizedCfnAuthConfig_Dev
              ActionTypeId:
                Category: Invoke
                Owner: AWS
                Version: "1"
                Provider: Lambda
              Configuration:
                FunctionName: CPUpdateJsonFile
                UserParameters: !Sub |
                  {
                    "JsonFiles": [
                      "App::aws-inf/template-configuration.json"
                    ],
                    "Json": {
                      "Parameters": {
                        "KCBaseUrl": "CfnDeploy_Dev::stack-outputs.json:Domain",
                        "Auth0Domain": "${Auth0Domain}",
                        "LayerName": "${LayerName}-${AWS::StackName}"
                      }
                    },
                    "OutputFile": "template-configuration.json"
                  }
              InputArtifacts:
                - Name: App
                - Name: CfnDeploy_Dev
              OutputArtifacts:
                - Name: FinalizedCfnAuthConfig_Dev
              RunOrder: 4
            -
              Name: CfnAuthDeploy_Dev
              Region: !Ref AWS::Region
              RoleArn: !GetAtt CodePipelineServiceRole.Arn
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: "1"
                Provider: CloudFormation
              Configuration:
                ActionMode: CREATE_UPDATE
                Capabilities: CAPABILITY_IAM,CAPABILITY_AUTO_EXPAND
                RoleArn: !GetAtt CodePipelineServiceRole.Arn
                StackName: !Sub ${ProjectName}-${AWS::StackName}-dev-authorizer
                TemplatePath: "AuthPackage::auth.packaged.yml"
                TemplateConfiguration: "FinalizedCfnAuthConfig_Dev::template-configuration.json"
                OutputFileName: stack-outputs.json
              InputArtifacts:
                - Name: AuthPackage
                - Name: FinalizedCfnAuthConfig_Dev
              OutputArtifacts:
                - Name: CfnAuthDeploy_Dev
              RunOrder: 5
            -
              Name: ImportConfig_Dev
              RunOrder: 6
              ActionTypeId:
                Category: Invoke
                Owner: AWS
                Version: "1"
                Provider: Lambda
              Configuration:
                FunctionName: CPInvokeLambda
                UserParameters: !Sub |
                  {
                    "TargetFunctionName": "CfnDeploy_Dev::stack-outputs.json:CpConfigImportLambdaArn",
                    "Payload": {"ImportId":"#{codepipeline.PipelineExecutionId}"},
                    "AccountId": "${AWS::AccountId}",
                    "Region": "${AWS::Region}",
                    "ParseResponse": true
                  }
              InputArtifacts:
                - Name: CfnDeploy_Dev
            - !If
              - RotateClientSecret
              -
                Name: PostDeployApiActions_Dev
                RunOrder: 7
                ActionTypeId:
                  Category: Invoke
                  Owner: AWS
                  Version: "1"
                  Provider: Lambda
                Configuration:
                  FunctionName: CPInvokeLambda
                  UserParameters: !Sub |
                    {
                      "TargetFunctionName": "CfnDeploy_Dev::stack-outputs.json:CpPostDeployLambdaArn",
                      "Payload": { "Actions": [ "rotate_client_secrets","clear_user_cache" ] },
                      "AccountId": "${AWS::AccountId}",
                      "Region": "${AWS::Region}",
                      "InvocationType": "RequestResponse",
                      "ParseResponse": true
                    }
                InputArtifacts:
                  - Name: CfnDeploy_Dev
              - !Ref AWS::NoValue


  CodePipelineServiceRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: cloudformation.amazonaws.com
            Action: sts:AssumeRole
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action: sts:AssumeRole
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess

Outputs:
  KeyCloakConsoleUrl:
    Description: URL of KeyCloak console
    Value: !Sub https://${SubDomain}.${DnsHostedZone}/auth/
