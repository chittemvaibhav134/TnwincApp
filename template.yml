---
AWSTemplateFormatVersion: 2010-09-09

Description: >
  Creates/Manages a Keycloak instance

Metadata:
  cfn-lint:
    config:
      ignore_checks:
        - W3002

Parameters:
  InfrastructureStackName:
    Type: String
  Subdomain:
    Type: String
  DnsHostedZone:
    Type: String
  EcsDesiredCount:
    Type: Number
    Default: 1
  Stage:
    Type: String
    AllowedValues:
      - Production
      - Development
  KeyCloakImage:
    Type: String
  KeyCloakAdminApiDefaultSecret:
    Type: String
    NoEcho: True
    Default: '4d1e3de1-6f61-46b1-92a8-e1eccce61559'
  InstanceCertificateArn:
    Type: String
    Default: None
    Description: This is the existing certificate for this developer's stack. If 'None' is provided the certificate will be created

Conditions:
  CreateInstanceCert: !Equals [ !Ref InstanceCertificateArn, "None"]
  Development: !Equals [ !Ref Stage, "Development" ]
  NotDevelopment: !Not [!Equals [ !Ref Stage, "Development" ] ]

Mappings:
  StageToSubnets:
    Development:
      KC: 28
    Production:
      KC: 28

  StageToContainerResources:
    Development:
      TaskMemory: 2048
      TaskCpu: 1024
    Production:
      TaskMemory: 2048
      TaskCpu: 1024

Resources:
  ECSTaskRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com

  ContainerTaskPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: root
      Roles:
        - !Ref ECSTaskRole
        - !Ref TaskExecutionRole
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Resource: !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${AWS::StackName}/*"
            Effect: Allow
            Action:
              - ssm:GetParameterHistory
              - ssm:GetParameter
              - ssm:GetParameters
              - ssm:GetParametersByPath
          - Resource: !Sub "arn:aws:kms:${AWS::Region}:${AWS::AccountId}:alias/aws/ssm"
            Effect: Allow
            Action:
              - kms:Decrypt
          - Resource: 
            - !GetAtt S3ConfigBucket.Arn
            - !Sub "${S3ConfigBucket.Arn}/*"
            Effect: Allow
            Action:
              - s3:GetObject
              - s3:GetObjectVersion
              - s3:ListBucket

  LBSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: !Sub ${AWS::StackName}-hosts
      SecurityGroupIngress:
        - SourceSecurityGroupId: !Ref SecurityGroup
          IpProtocol: "-1"
      VpcId:
        Fn::ImportValue: !Sub "${InfrastructureStackName}-VpcId"

  Cluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Ref AWS::StackName

  SecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: !Sub ${AWS::StackName}-alb
      SecurityGroupIngress:
        - CidrIp: "0.0.0.0/0"
          IpProtocol: "TCP"
          FromPort: 443
          ToPort: 443
      VpcId:
        Fn::ImportValue: !Sub "${InfrastructureStackName}-VpcId"

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
        - !Ref KeycloakSubnet1
        - !Ref KeycloakSubnet2
      SecurityGroups:
        - !Ref SecurityGroup

  KcCertificate:
    Type: AWS::CertificateManager::Certificate
    Condition: CreateInstanceCert
    Properties:
      DomainName: !Sub "*.${Subdomain}.${DnsHostedZone}"
      SubjectAlternativeNames:
        - !Sub "${Subdomain}.${DnsHostedZone}"
      ValidationMethod: DNS

  LoadBalancerListenerHttps:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: 443
      Protocol: HTTPS
      SslPolicy: ELBSecurityPolicy-TLS-1-2-2017-01
      Certificates:
        - CertificateArn: !If [CreateInstanceCert, !Ref KcCertificate, !Ref InstanceCertificateArn]
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup

  LoadBalancerWildFlyListener:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: !Ref LoadBalancerListenerHttps
      Priority: 5
      Conditions:
        - Field: host-header
          HostHeaderConfig:
            Values:
              - !Sub "${Subdomain}.${DnsHostedZone}"
        - Field: path-pattern
          PathPatternConfig:
            Values:
              - /health
      Actions:
        - Type: forward 
          ForwardConfig:
            TargetGroups:
              - TargetGroupArn: !Ref WildFlyTargetGroup


  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn: LoadBalancer
    Properties:
      VpcId:
        Fn::ImportValue: !Sub "${InfrastructureStackName}-VpcId"
      Port: 8443
      Protocol: HTTPS
      Matcher:
        HttpCode: 200-299
      HealthCheckIntervalSeconds: 300
      HealthCheckPath: /
      HealthCheckProtocol: HTTPS
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      TargetType: "ip"
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: "30"

  WildFlyTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn: LoadBalancer
    Properties:
      VpcId:
        Fn::ImportValue: !Sub "${InfrastructureStackName}-VpcId"
      Port: 9990
      Protocol: HTTP
      Matcher:
        HttpCode: 200-299
      HealthCheckIntervalSeconds: 60
      HealthCheckPath: /health
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      TargetType: "ip"
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: "30"

  KeycloakCidrs:
    Type: Custom::KeycloakCidrFindr
    Properties:
      ServiceToken: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:CfnCidrFindr
      VpcId:
        Fn::ImportValue: !Sub "${InfrastructureStackName}-VpcId"
      Sizes:
        # Container Cidrs might need different sizes depending on scaling/env
        - !FindInMap [StageToSubnets, !Ref "Stage", KC]
        - !FindInMap [StageToSubnets, !Ref "Stage", KC]
        # DB subnets probably are good with a /28 regardless
        - 28
        - 28

  Cidrs:
    Type: Custom::VariableHack
    Properties:
      ServiceToken: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:CfnVariableHack

      KCAZ1: !GetAtt KeycloakCidrs.CidrBlock1
      KCAZ2: !GetAtt KeycloakCidrs.CidrBlock2
      KCDBAZ1: !GetAtt KeycloakCidrs.CidrBlock3
      KCDBAZ2: !GetAtt KeycloakCidrs.CidrBlock4

  KeycloakSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Fn::ImportValue: !Sub "${InfrastructureStackName}-VpcId"
      AvailabilityZone: !Select [0, !GetAZs ]
      MapPublicIpOnLaunch: true
      CidrBlock: !GetAtt Cidrs.KCAZ1
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} [KC] (Public)

  KeycloakSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Fn::ImportValue:
          !Sub "${InfrastructureStackName}-VpcId"
      AvailabilityZone: !Select [ 1, !GetAZs ]
      MapPublicIpOnLaunch: true
      CidrBlock: !GetAtt Cidrs.KCAZ2
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} [KC] (Public)

  KeycloakSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Fn::ImportValue: !Sub "${InfrastructureStackName}-PublicRouteTable"
      SubnetId: !Ref KeycloakSubnet1

  KeycloakSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Fn::ImportValue: !Sub "${InfrastructureStackName}-PublicRouteTable"
      SubnetId: !Ref KeycloakSubnet2

  LogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      LogGroupName: !Sub /ecs/${AWS::StackName}

  AutoScalingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceAutoscaleRole'

  AutoScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MinCapacity: 1
      MaxCapacity: 5
      ResourceId: !Sub "service/${Cluster.Name}/${FargateService.Name}"
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
      RoleARN: !GetAtt AutoScalingRole.Arn

  ScalingPolicyCPU:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Sub ${FargateService}-cpu
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref AutoScalingTarget
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        ScaleInCooldown: 10
        ScaleOutCooldown: 10
        TargetValue: 45.0

  ScalingPolicyMemory:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Sub ${FargateService}-memory
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref AutoScalingTarget
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageMemoryUtilization
        ScaleInCooldown: 10
        ScaleOutCooldown: 10
        TargetValue: 50.0

  FargateService:
    Type: AWS::ECS::Service
    DependsOn:
      - LoadBalancerListenerHttps
    Properties:
      Cluster: !GetAtt Cluster.Arn
      DesiredCount: !Ref EcsDesiredCount
      TaskDefinition: !Ref TaskDefinition
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref LBSecurityGroup
          Subnets:
            - !Ref KeycloakSubnet1
            - !Ref KeycloakSubnet2
      LoadBalancers:
        - ContainerName: Navex-Keycloak
          ContainerPort: 8443
          TargetGroupArn: !Ref TargetGroup
        - ContainerName: Navex-Keycloak
          ContainerPort: 9990
          TargetGroupArn: !Ref WildFlyTargetGroup

  TaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub ${AWS::StackName}-KC
      RequiresCompatibilities:
        - FARGATE
      Memory: !FindInMap [StageToContainerResources, !Ref "Stage", TaskMemory]
      Cpu: !FindInMap [StageToContainerResources, !Ref "Stage", TaskCpu]
      NetworkMode: awsvpc
      ExecutionRoleArn: !GetAtt TaskExecutionRole.Arn
      TaskRoleArn: !Ref ECSTaskRole
      ContainerDefinitions:
        - Name: Navex-Keycloak
          Image: !Ref KeyCloakImage

          Essential: true
          PortMappings:
            - ContainerPort: 8443
            - ContainerPort: 9990
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref AWS::Region
              awslogs-group: !Ref LogGroup
              awslogs-stream-prefix: kc-app
          Environment:
            - Name: DB_ADDR
              Value: !GetAtt DbStrings.EndPoint
            - Name: DB_PORT
              Value: !GetAtt DbStrings.Port
            - Name: DB_USER
              Value: !GetAtt DbUser.Name
            - Name: DB_VENDOR
              Value: postgres
            - Name: DB_DATABASE
              Value: postgres
          Secrets:
            - Name: DB_PASSWORD
              ValueFrom: !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter${DbStrings.SsmPath}
          EntryPoint:
            - /opt/jboss/tools/docker-entrypoint.sh
            - "-Djboss.bind.address.management=0.0.0.0"

  ImportConfigTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub ${AWS::StackName}-KCCONFIG
      RequiresCompatibilities:
        - FARGATE
      Memory: !FindInMap [StageToContainerResources, !Ref "Stage", TaskMemory]
      Cpu: !FindInMap [StageToContainerResources, !Ref "Stage", TaskCpu]
      NetworkMode: awsvpc
      ExecutionRoleArn: !GetAtt TaskExecutionRole.Arn
      TaskRoleArn: !Ref ECSTaskRole
      Volumes:
        - Name: config
      ContainerDefinitions:
        - 
          Name: Navex-Keycloak-Config
          Image: !Ref KeyCloakImage
          Essential: true
          StartTimeout: 300
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref AWS::Region
              awslogs-group: !Ref LogGroup
              awslogs-stream-prefix: kc-config
          Environment:
            - Name: DB_ADDR
              Value: !GetAtt DbStrings.EndPoint
            - Name: DB_PORT
              Value: !GetAtt DbStrings.Port
            - Name: DB_USER
              Value: !GetAtt DbUser.Name
            - Name: DB_VENDOR
              Value: postgres
            - Name: DB_DATABASE
              Value: postgres
          Secrets:
            - Name: DB_PASSWORD
              ValueFrom: !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter${DbStrings.SsmPath}
          MountPoints:
            - ContainerPath: /import
              ReadOnly: true
              SourceVolume: config
          EntryPoint:
            - /opt/jboss/tools/docker-entrypoint.sh
            - "-Dkeycloak.migration.action=import -Dkeycloak.migration.provider=dir -Dkeycloak.migration.dir=/import"
          DependsOn:
            - Condition: SUCCESS
              ContainerName: KC-Config-Importer
        -
          Name: KC-Config-Importer
          Image: mikesir87/aws-cli:latest
          Essential: false
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref AWS::Region
              awslogs-group: !Ref LogGroup
              awslogs-stream-prefix: kc-config
          Environment:
            - Name: S3_CONFIG_BUCKET
              Value: !Ref S3ConfigBucket
          MountPoints:
            - ContainerPath: /import
              ReadOnly: false
              SourceVolume: config
          Command:
            - /bin/sh
            - -c
            - aws s3 sync s3://$S3_CONFIG_BUCKET /import

  CpRunImportConfigTaskRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Policies:
        - PolicyName: EcsTaskCtl
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Resource:
                  - !Sub "arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:task-definition/${AWS::StackName}-KCCONFIG:*"
                  - !GetAtt Cluster.Arn
                Effect: Allow
                Action:
                  - ecs:RunTask
                  - ecs:StartTask
              - Resource: "*"
                Effect: Allow
                Action: 
                  - ecs:StopTask
                  - ecs:ListTasks
                Condition:
                  ArnEquals:
                    "ecs:cluster": !GetAtt Cluster.Arn
              - Resource: "*"
                Effect: Allow
                Action: 
                  - ecs:DescribeTaskDefinition
                  - ecs:DescribeTasks
              - Resource: !GetAtt LogGroup.Arn
                Action: logs:FilterLogEvents
                Effect: Allow
              - Resource:
                  - !GetAtt TaskExecutionRole.Arn
                  - !GetAtt ECSTaskRole.Arn
                Effect: Allow
                Action:
                  - iam:PassRole

  CpRunImportConfigTaskLambda:
    Type: AWS::Lambda::Function
    Properties:
      # Explicit name to get around circular dep with role privs
      FunctionName: !Sub ${AWS::StackName}-CpRunImportTask
      Code: ./lambdas/kc-config-import/
      Runtime: python3.7
      Role: !GetAtt CpRunImportConfigTaskRole.Arn
      MemorySize: 256
      Timeout: 20
      Handler: kc_import_config.cp_handler
      Environment:
        Variables:
          Cluster: !GetAtt Cluster.Arn
          TaskDefinition: !Ref ImportConfigTaskDefinition
          #TaskFamily: !Sub ${AWS::StackName}-KCCONFIG
          TaskSubnets: !Sub ${KeycloakSubnet1},${KeycloakSubnet2}

  S3ConfigBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain

  ClientSecretRotateCloudwatchEvent:
    Type: AWS::Events::Rule
    Properties:
      Description: "Schedule keycloak client secret rotation"
      ScheduleExpression: "cron(0 2 * * ? *)"
      State: DISABLED
      Targets:
        - Arn: !GetAtt CweClientSecretRotateLambda.Arn
          Id: "CweClientSecretRotateLambda"

  PermissionForEventsToInvokeCoiDataCleanupPurgeDormantInProgressResponsesSchedulerLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref CweClientSecretRotateLambda
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt ClientSecretRotateCloudwatchEvent.Arn

  # DefaultSecret exist in the source control config that is imported
  # it should only be valid for a second after a deploy hopefully...
  # We can probably get around this if needed, but it will be clunky i think
  ClientSecretRotationConstants:
    Type: Custom::VariableHack
    Metadata:
      cfn-lint:
        config:
          ignore_checks:
            - W2501
    Properties:
      ServiceToken: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:CfnVariableHack
      AdminClientId: admin-api-proxy
      AdminSecretSsmPath: !Sub /${AWS::StackName}/client-keys/master/admin-api-proxy
      SsmPrefix: !Sub /${AWS::StackName}/client-keys
      
  ClientSecretRotateLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: SsmParameterAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Resource: 
                  - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter${ClientSecretRotationConstants.SsmPrefix}/*"
                  - !Sub "arn:aws:kms:${AWS::Region}:${AWS::AccountId}:alias/aws/ssm" 
                Effect: Allow
                Action: 
                  - ssm:PutParameter
                  - kms:Encrypt
                  - kms:Decrypt
              - Resource: !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter${ClientSecretRotationConstants.AdminSecretSsmPath}"
                Effect: Allow
                Action: ssm:GetParameter
    
  CweClientSecretRotateLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code: ./lambdas/kc-api-proxy/
      Runtime: python3.8
      Role: !GetAtt ClientSecretRotateLambdaRole.Arn
      MemorySize: 256
      Timeout: 60
      Handler: kc_api_proxy.cwe_rotate_handler
      Environment:
        Variables:
          KeyCloakBaseUrl: !Sub "https://navex.${Subdomain}.${DnsHostedZone}"
          AdminClientId: !GetAtt ClientSecretRotationConstants.AdminClientId
          AdminDefaultSecret: !Ref KeyCloakAdminApiDefaultSecret
          AdminSecretSsmPath: !GetAtt ClientSecretRotationConstants.AdminSecretSsmPath
          SsmPrefix: !GetAtt ClientSecretRotationConstants.SsmPrefix

  CpPostDeployLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code: ./lambdas/kc-api-proxy/
      Runtime: python3.8
      Role: !GetAtt ClientSecretRotateLambdaRole.Arn
      MemorySize: 256
      Timeout: 60
      Handler: kc_api_proxy.cp_post_deploy_handler
      Environment:
        Variables:
          KeyCloakBaseUrl: !Sub "https://navex.${Subdomain}.${DnsHostedZone}"
          AdminClientId: !GetAtt ClientSecretRotationConstants.AdminClientId
          AdminDefaultSecret: !Ref KeyCloakAdminApiDefaultSecret
          AdminSecretSsmPath: !GetAtt ClientSecretRotationConstants.AdminSecretSsmPath
          SsmPrefix: !GetAtt ClientSecretRotationConstants.SsmPrefix

  Dns:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneName: !Sub "${DnsHostedZone}."
      Name: !Sub "*.${Subdomain}.${DnsHostedZone}."
      TTL: 900
      Type: CNAME
      ResourceRecords:
        - !GetAtt LoadBalancer.DNSName

  RootDns:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneName: !Sub "${DnsHostedZone}."
      Name: !Sub "${Subdomain}.${DnsHostedZone}."
      TTL: 900
      Type: CNAME
      ResourceRecords:
        - !GetAtt LoadBalancer.DNSName

  DbUser:
    Type: Custom::VariableHack
    Properties:
      ServiceToken: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:CfnVariableHack
      Name: postgres

  DbPassword:
    Type: Custom::GeneratedString
    Properties:
      ServiceToken: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:CfnGenString
      ExcludePunctuation: true
      Length: 30

  DbStrings:
    Type: Custom::VariableHack
    Properties:
      ServiceToken: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:CfnVariableHack
      EndPoint:
        !If
          - Development
          - !Sub ${DatabaseInstance.Endpoint.Address}
          - !Sub ${DatabaseCluster.Endpoint.Address}
      Port:
        !If
          - Development
          - !Sub ${DatabaseInstance.Endpoint.Port}
          - !Sub ${DatabaseCluster.Endpoint.Port}
      SsmPath: !Sub /${AWS::StackName}/db/password

  SsmDbPassword:
    Type: Custom::SsmCreateParameter
    Properties:
      ServiceToken:
        !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:cloudformation-set-ssm-param
      ParameterProperties:
        Name: !GetAtt DbStrings.SsmPath
        Value: !GetAtt DbPassword.Value
        Type: "SecureString"
        KeyId: "alias/aws/ssm"
        Overwrite: True

  DbClusterSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: !Sub ${AWS::StackName}-dbcluster
      SecurityGroupIngress:
        - CidrIp: !GetAtt Cidrs.KCDBAZ1
          IpProtocol: "TCP"
          FromPort: 5432
          ToPort: 5432
          Description: !Sub "KeyCloak DB AZ1 (${KeyCloakDbSubnet1})"
        - CidrIp: !GetAtt Cidrs.KCDBAZ2
          IpProtocol: "TCP"
          FromPort: 5432
          ToPort: 5432
          Description: !Sub "KeyCloak DB AZ2 (${KeyCloakDbSubnet2})"
        - CidrIp: !GetAtt Cidrs.KCAZ1
          IpProtocol: "TCP"
          FromPort: 5432
          ToPort: 5432
          Description: !Sub "KeyCloak AZ1 (${KeycloakSubnet1})"
        - CidrIp: !GetAtt Cidrs.KCAZ2
          IpProtocol: "TCP"
          FromPort: 5432
          ToPort: 5432
          Description: !Sub "KeyCloak AZ2 (${KeycloakSubnet2})"
      VpcId:
        Fn::ImportValue:
          !Sub "${InfrastructureStackName}-VpcId"

  DatabaseSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: CloudFormation managed DB subnet group.
      SubnetIds:
        - !Ref KeyCloakDbSubnet1
        - !Ref KeyCloakDbSubnet2

  DatabaseClusterParameterGroup:
    Type: AWS::RDS::DBClusterParameterGroup
    Condition:  NotDevelopment
    Properties:
      Description: !Sub "Aurora PG Cluster Parameter Group for ${AWS::StackName}"
      # postgres 11 isn't in eu-central-1 yet apparently
      Family: aurora-postgresql10
      Parameters:
        rds.force_ssl: 0

  DatabaseInstanceParameterGroup:
    Type: AWS::RDS::DBParameterGroup
    Condition:  NotDevelopment
    Properties:
      Description: !Sub "Aurora PG DB Instance Parameter Group for ${AWS::StackName}"
      Family: aurora-postgresql10
      Parameters:
        shared_preload_libraries: auto_explain,pg_stat_statements,pg_hint_plan,pgaudit
        log_statement: "ddl"
        log_connections: "1"
        log_disconnections: "1"
        log_lock_waits: "1"
        log_min_duration_statement: "5000"
        auto_explain.log_min_duration: "5000"
        auto_explain.log_verbose: "1"
        log_rotation_age: "1440"
        log_rotation_size: "102400"
        rds.log_retention_period: "10080"
        random_page_cost: "1"
        track_activity_query_size: "16384"
        idle_in_transaction_session_timeout: "7200000"
        statement_timeout: "7200000"
        search_path: '"$user",public'

  DatabaseMonitoringRole: 
    Type: AWS::IAM::Role
    Condition: NotDevelopment
    Properties: 
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - 
            Effect: "Allow"
            Principal: 
              Service: 
                - "monitoring.rds.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns: 
        - arn:aws:iam::aws:policy/service-role/AmazonRDSEnhancedMonitoringRole

  DatabaseCluster:
    Type: AWS::RDS::DBCluster
    Condition:  NotDevelopment
    DeletionPolicy: Snapshot
    UpdateReplacePolicy: Snapshot
    Properties:
      Engine: aurora-postgresql
      EngineVersion: "10.11"
      BackupRetentionPeriod: 35
      PreferredBackupWindow: 05:00-06:00
      PreferredMaintenanceWindow: mon:03:00-mon:04:00
      DBSubnetGroupName: !Ref DatabaseSubnetGroup
      VpcSecurityGroupIds:
        - !Ref DbClusterSecurityGroup
      DBClusterParameterGroupName: !Ref DatabaseClusterParameterGroup
      MasterUsername: !GetAtt DbUser.Name
      MasterUserPassword: !GetAtt DbPassword.Value
      StorageEncrypted: true
      Port: 5432
      Tags:
        - Key: navex:backup
          Value: yes-please

  DatabasePrimaryInstance:
    Type: AWS::RDS::DBInstance
    Condition: NotDevelopment
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      Engine: aurora-postgresql
      DBClusterIdentifier:  !Ref DatabaseCluster
      DBInstanceClass: db.r4.large
      DBSubnetGroupName: !Ref DatabaseSubnetGroup
      DBParameterGroupName: !Ref DatabaseInstanceParameterGroup
      MonitoringInterval: 1
      MonitoringRoleArn: !GetAtt DatabaseMonitoringRole.Arn
      AutoMinorVersionUpgrade: false
      PubliclyAccessible: false
      EnablePerformanceInsights: true
      PerformanceInsightsRetentionPeriod: 731

  DatabaseInstance:
    Type: AWS::RDS::DBInstance
    Condition: Development
    DeletionPolicy: Snapshot
    UpdateReplacePolicy: Snapshot
    Properties:
        Engine: postgres
        # Encryption at rest is supported on db.t2.small and larger i think
        # if we want to enable it for Dev stacks we need to up the instance class
        StorageEncrypted: false
        EngineVersion: "10.11"
        # if specifying a version explicitly apparently you should nuke the auto-upgrade
        # cause otherwise cfn can try to downgrade the db and blow up stack deployments
        AutoMinorVersionUpgrade: false
        AllocatedStorage: "5"
        DBInstanceClass: db.t2.micro
        DBSubnetGroupName: !Ref DatabaseSubnetGroup
        MasterUsername: !GetAtt DbUser.Name
        MasterUserPassword: !GetAtt DbPassword.Value
        VPCSecurityGroups:
          - !Ref DbClusterSecurityGroup
        PubliclyAccessible: false
        BackupRetentionPeriod: 7

  KeyCloakDbSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Fn::ImportValue:
          !Sub "${InfrastructureStackName}-VpcId"
      AvailabilityZone: !Select [ 0, !GetAZs ]
      MapPublicIpOnLaunch: false
      CidrBlock: !GetAtt Cidrs.KCDBAZ1
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} [DB] (Private)

  KeyCloakDbSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Fn::ImportValue:
          !Sub "${InfrastructureStackName}-VpcId"
      AvailabilityZone: !Select [ 1, !GetAZs ]
      MapPublicIpOnLaunch: false
      CidrBlock: !GetAtt Cidrs.KCDBAZ2
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} [DB] (Private)

  KeyCloakDbSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Fn::ImportValue:
          !Sub "${InfrastructureStackName}-PrivateRouteTableAZ1"
      SubnetId: !Ref KeyCloakDbSubnet1

  KeyCloakDbSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Fn::ImportValue:
          !Sub "${InfrastructureStackName}-PrivateRouteTableAZ2"
      SubnetId: !Ref KeyCloakDbSubnet2

Outputs:
  Domain:
    Description: domain to KC service
    Value: !Ref Dns
  RootDomain:
    Description: domain to KC service without string substitution
    Value: !Ref RootDns
  ConfigBucket:
    Value: !Ref S3ConfigBucket
  CpConfigImportLambdaArn:
    Value: !GetAtt CpRunImportConfigTaskLambda.Arn
  CpPostDeployLambdaArn:
    Value: !GetAtt CpPostDeployLambda.Arn
  ClientSecretSsmPrefix:
    Value: !GetAtt ClientSecretRotationConstants.SsmPrefix
  ClientSecretSsmRegion:
    Value: !Ref AWS::Region
  ClientSecretSsmKmsArn:
    Value: !Sub "arn:aws:kms:${AWS::Region}:${AWS::AccountId}:alias/aws/ssm"
  NcisApiClientSecretSsmArn:
    Value: !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter${ClientSecretRotationConstants.SsmPrefix}/navex/ncis-api"
  CmdBackendClientSecretSsmArn:
    Value: !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter${ClientSecretRotationConstants.SsmPrefix}/navex/cmd-backend"
