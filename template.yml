---
AWSTemplateFormatVersion: 2010-09-09

Description: >
  Creates/Manages a Keycloak instance

Parameters:
  InfrastructureStackName:
    Type: String
  EcsClusterArn:
    Type: String
    Default: "None"
  Subdomain:
    Type: String
  DnsHostedZone:
    Type: String
  EcsDesiredCount:
    Type: Number
    Default: 1
  Stage:
    Type: String
    AllowedValues:
      - Production
      - Development
    Description: Determines ASPNET_ENVIRONMENT and resource levels
  UiContainerRepository:
    Type: String
  BuildHash:
    Type: String
    Default: 12345abcde
  KeycloakSsmJwtSecretKeyPath:
    Type: String
  KeycloakAccessPolicyArn:
    Type: String

Conditions:
  UniqueEcsCluster: !Equals [!Ref EcsClusterArn, "None"]

Mappings:
  StageToSubnets:
    Development:
      UI: 28
    Production:
      UI: 28

  StageToContainerResources:
    Development:
      TaskMemory: 1024
      TaskCpu: 512
    Production:
      TaskMemory: 1024
      TaskCpu: 512

Resources:
  JwtSecretKey:
    Type: Custom::SsmGetParameter
    Properties:
      Name: !Ref KeycloakSsmJwtSecretKeyPath
      ServiceToken: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:cloudformation-get-ssm-param

  SsmUiIamAccessKey:
    Type: Custom::SsmCreateParameter
    Properties:
      ParameterProperties:
        Name: !Sub "/${AWS::StackName}/Keycloak__AwsAccessKey"
        Description: "Access key"
        Value: !Ref KeycloakConsumerCreds
        Type: "String"
        Overwrite: True
      ServiceToken: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:cloudformation-set-ssm-param

  SsmUiIamSecretKey:
    Type: Custom::SsmCreateParameter
    Properties:
      ParameterProperties:
        Name: !Sub "/${AWS::StackName}/Keycloak__AwsSecretKey"
        Description: "Secret key"
        Value: !GetAtt KeycloakConsumerCreds.SecretAccessKey
        Type: "SecureString"
        KeyId: "alias/aws/ssm"
        Overwrite: True
      ServiceToken: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:cloudformation-set-ssm-param

  SsmApiJwtKey:
    Type: Custom::SsmCreateParameter
    Properties:
      ParameterProperties:
        Name: !Sub "/${AWS::StackName}/Keycloak_JwtKey"
        Description: "Jwt key"
        Value: !GetAtt JwtSecretKey.Parameter.Value
        Type: "SecureString"
        KeyId: "alias/aws/ssm"
        Overwrite: True
      ServiceToken: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:cloudformation-set-ssm-param

  ECSTaskRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com

  ContainerTaskPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: root
      Roles:
        - !Ref ECSTaskRole
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Resource: !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${AWS::StackName}*"
            Effect: Allow
            Action:
              - ssm:GetParameterHistory
              - ssm:GetParameter
              - ssm:GetParameters
              - ssm:GetParametersByPath
          - Resource: !Sub "arn:aws:kms:${AWS::Region}:${AWS::AccountId}:alias/aws/ssm"
            Effect: Allow
            Action:
              - kms:Decrypt

  LBSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: !Sub ${AWS::StackName}-hosts
      SecurityGroupIngress:
        - SourceSecurityGroupId: !Ref SecurityGroup
          IpProtocol: "-1"
      VpcId:
        Fn::ImportValue: !Sub "${InfrastructureStackName}-VpcId"

  EcsCluster:
    Type: Custom::VariableHack
    Properties:
      ServiceToken: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:CfnVariableHack
      Arn: !If
        - UniqueEcsCluster
        - !Ref EcsClusterArn

  KeycloakConsumer:
    Type: AWS::IAM::User
    Properties:
      ManagedPolicyArns:
        - !Ref KeycloakAccessPolicyArn

  KeycloakConsumerCreds:
    Type: AWS::IAM::AccessKey
    Properties:
      Serial: 1
      UserName: !Ref KeycloakConsumer

  SecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: !Sub ${AWS::StackName}-alb
      SecurityGroupIngress:
        - CidrIp: "0.0.0.0/0"
          IpProtocol: "TCP"
          FromPort: 80
          ToPort: 80
        - CidrIp: "0.0.0.0/0"
          IpProtocol: "TCP"
          FromPort: 443
          ToPort: 443
      VpcId:
        Fn::ImportValue: !Sub "${InfrastructureStackName}-VpcId"

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
        - !Ref KeycloakSubnet1
      SecurityGroups:
        - !Ref SecurityGroup

  UiCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Sub "*.${Subdomain}.${DnsHostedZone}"
      ValidationMethod: DNS

  LoadBalancerListener: # Ask Weston about this
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup

  LoadBalancerListenerHttps:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: 443
      Protocol: HTTPS
      SslPolicy: ELBSecurityPolicy-TLS-1-2-2017-01
      Certificates:
        - CertificateArn: !Ref UiCertificate
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn: LoadBalancer
    Properties:
      VpcId:
        Fn::ImportValue: !Sub "${InfrastructureStackName}-VpcId"
      Port: 8443
      Protocol: HTTPS
      Matcher:
        HttpCode: 200-499
      HealthCheckIntervalSeconds: 300
      HealthCheckPath: /Error
      HealthCheckProtocol: HTTPS
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      TargetType: "ip"
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: "30"

  ListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: !Ref LoadBalancerListener
      Priority: 1
      Conditions:
        - Field: path-pattern
          Values:
            - /
      Actions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward

  KeycloakCidrs: # Ask Weston about this
    Type: Custom::KeycloakCidrFindr
    Properties:
      ServiceToken: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:CfnCidrFindr
      VpcId:
        Fn::ImportValue: !Sub "${InfrastructureStackName}-VpcId"
      Sizes:
        - !FindInMap [StageToSubnets, !Ref "Stage", UI]
        - !FindInMap [StageToSubnets, !Ref "Stage", UI]

  Cidrs: # Ask Weston about this
    Type: Custom::VariableHack
    Properties:
      ServiceToken: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:CfnVariableHack

      UIAZ1: !GetAtt KeycloakCidrs.CidrBlock1
      UIAZ2: !GetAtt KeycloakCidrs.CidrBlock2

  KeycloakSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Fn::ImportValue: !Sub "${InfrastructureStackName}-VpcId"
      AvailabilityZone: !Select [0, !GetAZs ]
      MapPublicIpOnLaunch: true
      CidrBlock: !GetAtt Cidrs.UIAZ1
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} [UI] (Public)

  KeycloakSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Fn::ImportValue: !Sub "${InfrastructureStackName}-PublicRouteTable"
      SubnetId: !Ref KeycloakSubnet1

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /ecs/${AWS::StackName}

  UiFargateService:
    Type: AWS::ECS::Service
    DependsOn:
      - LoadBalancerListenerHttps
      - SsmUiIamAccessKey
      - SsmUiIamSecretKey
      - SsmApiJwtKey
    Properties:
      Cluster: !GetAtt EcsCluster.Arn
      DesiredCount: !Ref EcsDesiredCount
      TaskDefinition: !Ref UiTaskDefinition
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref LBSecurityGroup
          Subnets:
            - !Ref KeycloakSubnet1
      LoadBalancers:
        - ContainerName: Navex-Keycloak
          ContainerPort: 8443
          TargetGroupArn: !Ref TargetGroup

  TaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

  UiTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub ${AWS::StackName}-UI
      RequiresCompatibilities:
        - FARGATE
      Memory: !FindInMap [StageToContainerResources, !Ref "Stage", TaskMemory]
      Cpu: !FindInMap [StageToContainerResources, !Ref "Stage", TaskCpu]
      NetworkMode: awsvpc
      ExecutionRoleArn: !GetAtt TaskExecutionRole.Arn
      TaskRoleArn: !Ref ECSTaskRole
      ContainerDefinitions:
        - Name: Navex-Keycloak
          Image: !Ref UiContainerRepository
          Environment:
            - Name: ASPNETCORE_ENVIRONMENT
              Value: !Ref Stage
            - Name: AWS_ENV_PATH
              Value: !Sub "/${AWS::StackName}/"
            - Name: AWS_REGION
              Value: !Ref AWS::Region

          Essential: true
          PortMappings:
            - ContainerPort: 8080
            - ContainerPort: 8443
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref AWS::Region
              awslogs-group: !Ref LogGroup
              awslogs-stream-prefix: !Ref AWS::StackName

  UiDns:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneName: !Sub "${DnsHostedZone}."
      Name: !Sub "*.${Subdomain}.${DnsHostedZone}."
      TTL: "900"
      Type: CNAME
      ResourceRecords:
        - !GetAtt LoadBalancer.DNSName

Outputs:
  Domain:
    Description: domain to UI service
    Value: !Ref UiDns
  RootDomain:
    Description: domain to UI service without string substitution
    Value: !Sub "${Subdomain}.${DnsHostedZone}"
  Url:
    Description: Url to UI with client key string substitution formating
    Value: !Sub "https://{0}.${Subdomain}.${DnsHostedZone}"
  UserArn:
    Description: IAM user the ui uses to authenticate with the api
    Value: !GetAtt KeycloakConsumer.Arn
  BuildHash:
    Value: !Ref BuildHash
