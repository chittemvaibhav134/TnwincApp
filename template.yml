---
AWSTemplateFormatVersion: 2010-09-09

Description: >
  Creates/Manages a Keycloak instance

Metadata:
  cfn-lint:
    config:
      ignore_checks:
        - W3002
        - I3042

Parameters:
  InfrastructureStackName:
    Type: String
  Subdomain:
    Type: String
  DnsHostedZone:
    Type: String
  DnsHostedZoneId:
    Type: String
    Default: None
    Description: R53 hosted zone id; if supplied the ACM cert can be auto-approved from the deploy 
  Stage:
    Type: String
    AllowedValues:
      - Production
      - Development
  DesiredTaskCount:
    Type: Number
    Default: 1
    MaxValue: 10
  KeyCloakImage:
    Type: String
  KeyCloakAdminApiDefaultSecret:
    Type: String
    NoEcho: True
    Default: '4d1e3de1-6f61-46b1-92a8-e1eccce61559'
  InstanceCertificateArn:
    Type: String
    Default: None
    Description: This is the existing certificate for this developer's stack. If 'None' is provided the certificate will be created
  DbaAccessCidr:
    Type: String
    Default: "255.255.255.255/32"
    Description: If specified adds an ingress rule to the DB security group for dba management
    AllowedPattern: '^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$'
  NewRelicLicenseKeySsmArn:
    Type: String
    Default: None
  MoonwatchApiBaseUrl:
    Type: String
    Default: None
    Description: Base Url to the Moonwatch API
  MoonwatchApiRegion:
    Type: String
    Default: None
    Description: Region in which Moonwatch is deployed
  MoonwatchApiAccessPolicyArn:
    Type: String
    Default: None
    Description: ARN for Policy that will allow KeyCloak to call Moonwatch API to notify it of sessions starting
  LaunchDarklySdkKeySsmValue:
    Type: String
    Default: None
    Description: Global Launch Darkly SDK Key
  InfiniSpanCacheOwners:
    Type: Number
    Default: 2
    MaxValue: 2
    Description: How many nodes in the Infinispan cluster will replicate a given session
  RotateClientSecret:
    Type: String
    Default: "Yes"
    AllowedValues:
      - "Yes"
      - "No"

Conditions:
  CreateInstanceCert: !Equals [ !Ref InstanceCertificateArn, "None"]
  Development: !Equals [ !Ref Stage, "Development" ]
  NotDevelopment: !Not [!Equals [ !Ref Stage, "Development" ] ]
  DbaAccess: !Not [!Equals [ !Ref DbaAccessCidr, "255.255.255.255/32" ] ]
  EnableNewRelicAgent: !Not [!Equals [ !Ref NewRelicLicenseKeySsmArn, "None" ] ]
  AutoApproveCert: !Not [!Equals [ !Ref DnsHostedZoneId, "None" ] ]
  MoonwatchApiAccessPolicy: !Not [ !Equals [ !Ref "MoonwatchApiAccessPolicyArn", "None" ] ]
  RotateClientSecret: !Equals [!Ref RotateClientSecret, "Yes"]

Mappings:
  StageToSubnets:
    Development:
      KC: 28
    Production:
      KC: 28

  StageToContainerResources:
    Development:
      TaskMemory: 2048
      TaskCpu: 1024
      MaxJvmHeap: 1024M
    Production:
      TaskMemory: 4096
      TaskCpu: 2048
      MaxJvmHeap: 3072M

Resources:
  ECSTaskRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
        - !If [ MoonwatchApiAccessPolicy, !Ref "MoonwatchApiAccessPolicyArn", !Ref "AWS::NoValue" ]
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com

  ContainerTaskPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: root
      Roles:
        - !Ref ECSTaskRole
        - !Ref TaskExecutionRole
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Resource: 
            - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${AWS::StackName}/*"
            - !If [ EnableNewRelicAgent, !Ref NewRelicLicenseKeySsmArn, !Ref "AWS::NoValue" ]
            - !Ref LaunchDarklySdkKeySsmValue
            Effect: Allow
            Action:
              - ssm:GetParameterHistory
              - ssm:GetParameter
              - ssm:GetParameters
              - ssm:GetParametersByPath
          - Resource: 
            - !Sub "arn:aws:kms:${AWS::Region}:${AWS::AccountId}:alias/aws/ssm"
            Effect: Allow
            Action:
              - kms:Decrypt
          - Resource: 
            - !GetAtt S3ConfigBucket.Arn
            - !Sub "${S3ConfigBucket.Arn}/*"
            Effect: Allow
            Action:
              - s3:GetObject
              - s3:GetObjectVersion
              - s3:ListBucket

  AppSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: !Sub ${AWS::StackName}-hosts
      SecurityGroupIngress:
        - SourceSecurityGroupId: !Ref AlbSecurityGroup
          IpProtocol: "-1"
        - CidrIp: !GetAtt AppCidrs.AZ1
          IpProtocol: "TCP"
          FromPort: 7600
          ToPort: 7600
          Description: !Sub "KeyCloak AZ1 (${KeycloakAppSubnet1})"
        - CidrIp: !GetAtt AppCidrs.AZ1
          IpProtocol: "TCP"
          FromPort: 57600
          ToPort: 57600
          Description: !Sub "KeyCloak AZ1 (${KeycloakAppSubnet1})"
        - CidrIp: !GetAtt AppCidrs.AZ2
          IpProtocol: "TCP"
          FromPort: 7600
          ToPort: 7600
          Description: !Sub "KeyCloak AZ2 (${KeycloakAppSubnet2})"
        - CidrIp: !GetAtt AppCidrs.AZ2
          IpProtocol: "TCP"
          FromPort: 57600
          ToPort: 57600
          Description: !Sub "KeyCloak AZ2 (${KeycloakAppSubnet2})"
      VpcId:
        Fn::ImportValue: !Sub "${InfrastructureStackName}-VpcId"

  Cluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Ref AWS::StackName
      ClusterSettings:
        - Name: containerInsights
          Value: enabled

  AlbSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: !Sub ${AWS::StackName}-alb
      SecurityGroupIngress:
        - CidrIp: "0.0.0.0/0"
          IpProtocol: "TCP"
          FromPort: 443
          ToPort: 443
      VpcId:
        Fn::ImportValue: !Sub "${InfrastructureStackName}-VpcId"

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
        - !Ref KeycloakSubnet1
        - !Ref KeycloakSubnet2
      SecurityGroups:
        - !Ref AlbSecurityGroup

  KcCertificate:
    Type: AWS::CertificateManager::Certificate
    Condition: CreateInstanceCert
    Properties:
      DomainName: !Sub "*.${Subdomain}.${DnsHostedZone}"
      SubjectAlternativeNames:
        - !Sub "${Subdomain}.${DnsHostedZone}"
      ValidationMethod: DNS
      DomainValidationOptions:
        - !If
          - AutoApproveCert
          - DomainName: !Sub "*.${Subdomain}.${DnsHostedZone}"
            HostedZoneId: !Ref DnsHostedZoneId
          - !Ref AWS::NoValue

  LoadBalancerListenerHttps:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: 443
      Protocol: HTTPS
      SslPolicy: ELBSecurityPolicy-TLS-1-2-2017-01
      Certificates:
        - CertificateArn: !If [CreateInstanceCert, !Ref KcCertificate, !Ref InstanceCertificateArn]
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup

  ListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Condition: NotDevelopment
    Properties:
      ListenerArn: !Ref LoadBalancerListenerHttps
      Priority: 1
      Conditions:
        - Field: path-pattern
          PathPatternConfig:
            Values:
              - /auth/admin/navex/console*
              - /auth/admin/master/console*
      Actions:
        - Type: fixed-response
          FixedResponseConfig:
            StatusCode: "404"
  ListenerRule2:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Condition: NotDevelopment
    Properties:
      ListenerArn: !Ref LoadBalancerListenerHttps
      Priority: 2
      Conditions:
        - Field: path-pattern
          PathPatternConfig:
            Values:
              - /auth/admin
              - /auth/admin/
              - /auth
              - /auth/
      Actions:
        - Type: fixed-response
          FixedResponseConfig:
            StatusCode: "404"

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn: LoadBalancer
    Properties:
      VpcId:
        Fn::ImportValue: !Sub "${InfrastructureStackName}-VpcId"
      Port: 8443
      Protocol: HTTPS
      Matcher:
        HttpCode: 200-299
      HealthCheckIntervalSeconds: 60
      HealthCheckPath: /auth/
      HealthCheckProtocol: HTTPS
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 2
      TargetType: "ip"
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: "30"
        - Key: stickiness.enabled
          Value: "true"
        - Key: stickiness.type
          Value: lb_cookie

  KeycloakCidrs:
    Type: Custom::KeycloakCidrFindr
    Properties:
      ServiceToken: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:CfnCidrFindr
      VpcId:
        Fn::ImportValue: !Sub "${InfrastructureStackName}-VpcId"
      Sizes:
        # Container Cidrs might need different sizes depending on scaling/env
        - !FindInMap [StageToSubnets, !Ref "Stage", KC]
        - !FindInMap [StageToSubnets, !Ref "Stage", KC]
        # DB subnets probably are good with a /28 regardless
        - 28
        - 28

  KeycloakAppCidrs:
    Type: Custom::KeycloakCidrFindr
    # depends on is needed to avoid race conditions with cidr findr on new stacks
    DependsOn:
      - KeycloakSubnet1
      - KeycloakSubnet2
      - KeyCloakDbSubnet1
      - KeyCloakDbSubnet2
    Properties:
      ServiceToken: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:CfnCidrFindr
      VpcId:
        Fn::ImportValue: !Sub "${InfrastructureStackName}-VpcId"
      Sizes:
        - 28
        - 28

  Cidrs:
    Type: Custom::VariableHack
    Properties:
      ServiceToken: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:CfnVariableHack

      KCAZ1: !GetAtt KeycloakCidrs.CidrBlock1
      KCAZ2: !GetAtt KeycloakCidrs.CidrBlock2
      KCDBAZ1: !GetAtt KeycloakCidrs.CidrBlock3
      KCDBAZ2: !GetAtt KeycloakCidrs.CidrBlock4

  AppCidrs:
    Type: Custom::VariableHack
    Properties:
      ServiceToken: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:CfnVariableHack
      AZ1: !GetAtt KeycloakAppCidrs.CidrBlock1
      AZ2: !GetAtt KeycloakAppCidrs.CidrBlock2


  KeycloakSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Fn::ImportValue: !Sub "${InfrastructureStackName}-VpcId"
      AvailabilityZone: !Select [0, !GetAZs ]
      MapPublicIpOnLaunch: true
      CidrBlock: !GetAtt Cidrs.KCAZ1
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} [KC] (Public)

  KeycloakSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Fn::ImportValue:
          !Sub "${InfrastructureStackName}-VpcId"
      AvailabilityZone: !Select [ 1, !GetAZs ]
      MapPublicIpOnLaunch: true
      CidrBlock: !GetAtt Cidrs.KCAZ2
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} [KC] (Public)

  KeycloakAppSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Fn::ImportValue: !Sub "${InfrastructureStackName}-VpcId"
      AvailabilityZone: !Select [0, !GetAZs ]
      MapPublicIpOnLaunch: false
      CidrBlock: !GetAtt AppCidrs.AZ1
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} [KC] (Private)

  KeycloakAppSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Fn::ImportValue:
          !Sub "${InfrastructureStackName}-VpcId"
      AvailabilityZone: !Select [ 1, !GetAZs ]
      MapPublicIpOnLaunch: false
      CidrBlock: !GetAtt AppCidrs.AZ2
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} [KC] (Private)

  KeycloakSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Fn::ImportValue: !Sub "${InfrastructureStackName}-PublicRouteTable"
      SubnetId: !Ref KeycloakSubnet1

  KeycloakSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Fn::ImportValue: !Sub "${InfrastructureStackName}-PublicRouteTable"
      SubnetId: !Ref KeycloakSubnet2

  KeycloakAppSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Fn::ImportValue: !Sub "${InfrastructureStackName}-PrivateRouteTableAZ1"
      SubnetId: !Ref KeycloakAppSubnet1

  KeycloakAppSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Fn::ImportValue: !Sub "${InfrastructureStackName}-PrivateRouteTableAZ2"
      SubnetId: !Ref KeycloakAppSubnet2

  LogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      LogGroupName: !Sub /ecs/${AWS::StackName}

  CustomMetricConstants:
    Type: Custom::VariableHack
    Properties:
      ServiceToken: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:CfnVariableHack

      Namespace: !Sub NAVEX/${AWS::StackName}
      DuplicateUserIdAttemptedLoginMetricName: DuplicateUserIdAttemptedLogin
      InfinispanTimeoutMetricName: InfinispanTimeout
      InfinispanCacheTimeoutMetricName: InfinispanCacheTimeout
      JVMOutOfMemoryMetricName: JVMOutOfMemory

  DuplicateUserIdAttemptedLoginMetricFilter:
    Type: AWS::Logs::MetricFilter
    Properties:
      LogGroupName: !Ref LogGroup
      # filter pattern could be a lot more nifty but I'm not sure it buys us anything.
      FilterPattern: '"federated_identity_account_exists"'
      MetricTransformations:
        -
          MetricValue: '1'
          MetricNamespace: !GetAtt CustomMetricConstants.Namespace
          MetricName: !GetAtt CustomMetricConstants.DuplicateUserIdAttemptedLoginMetricName

  DuplicateUserIdAttemptedLoginAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Alarm on logs that contain the federated_identity_account_exists keycloak error
      ComparisonOperator: GreaterThanThreshold
      Threshold: 0
      DatapointsToAlarm: 1
      EvaluationPeriods: 1
      MetricName: !GetAtt CustomMetricConstants.DuplicateUserIdAttemptedLoginMetricName
      Namespace: !GetAtt CustomMetricConstants.Namespace
      Period: 60
      Statistic: Sum
      TreatMissingData: notBreaching

  InfinispanTimeoutMetricFilter:
    Type: AWS::Logs::MetricFilter
    Properties:
      LogGroupName: !Ref LogGroup
      # Example log we are looking for
      # [0m[31m17:17:54,048 ERROR [org.infinispan.interceptors.impl.InvocationContextInterceptor] (timeout-thread--p24-t1) ISPN000136: Error executing command ReplaceCommand on Cache 'sessions', writing keys [9222c3a4-ca85-4e15-81fa-e0c34c9c1eec]: org.infinispan.util.concurrent.TimeoutException: ISPN000476: Timed out waiting for responses for request 16082638 from ip-10-203-108-90
      FilterPattern: '"ISPN000476"'
      MetricTransformations:
        -
          MetricValue: '1'
          MetricNamespace: !GetAtt CustomMetricConstants.Namespace
          MetricName: !GetAtt CustomMetricConstants.InfinispanTimeoutMetricName

  InfinispanTimeoutAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmActions:
        - Ref: AlarmSnsTopic
      AlarmDescription: Alarm on logs that indicate that inifinspan requests are timing out
      ComparisonOperator: GreaterThanThreshold
      Threshold: 0
      DatapointsToAlarm: 1
      EvaluationPeriods: 1
      MetricName: !GetAtt CustomMetricConstants.InfinispanTimeoutMetricName
      Namespace: !GetAtt CustomMetricConstants.Namespace
      Period: 10
      Statistic: Sum
      TreatMissingData: notBreaching
  
  InfinispanCacheTimeoutAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmActions:
        - Ref: AlarmSnsTopic
      AlarmDescription: Alarm on logs that indicate that inifinspan cache requests are timing out
      ComparisonOperator: GreaterThanThreshold
      Threshold: 0
      DatapointsToAlarm: 1
      EvaluationPeriods: 1
      MetricName: !GetAtt CustomMetricConstants.InfinispanCacheTimeoutMetricName
      Namespace: !GetAtt CustomMetricConstants.Namespace
      Period: 10
      Statistic: Sum
      TreatMissingData: notBreaching

  InfinispanCacheTimeoutMetricFilter:
    Type: AWS::Logs::MetricFilter
    Properties:
      LogGroupName: !Ref LogGroup
      # Example log we are looking for
      # ISPN000136: Error executing command PutKeyValueCommand on Cache 'work', writing keys [task::ClearExpiredEvents]: org.infinispan.util.concurrent.TimeoutException: ISPN000476: Timed out waiting for responses for request 17063 from ip-10-202-108-87
      FilterPattern: '"ISPN000136"'
      MetricTransformations:
        -
          MetricValue: '1'
          MetricNamespace: !GetAtt CustomMetricConstants.Namespace
          MetricName: !GetAtt CustomMetricConstants.InfinispanCacheTimeoutMetricName
  
  JVMOutOfMemoryAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmActions:
        - Ref: AlarmSnsTopic
      AlarmDescription: Alarm on logs that indicate that inifinspan requests are timing out
      ComparisonOperator: GreaterThanThreshold
      Threshold: 0
      DatapointsToAlarm: 1
      EvaluationPeriods: 1
      MetricName: !GetAtt CustomMetricConstants.JVMOutOfMemoryMetricName
      Namespace: !GetAtt CustomMetricConstants.Namespace
      Period: 10
      Statistic: Sum
      TreatMissingData: notBreaching

  JVMOutOfMemoryMetricFilter:
    Type: AWS::Logs::MetricFilter
    Properties:
      LogGroupName: !Ref LogGroup
      # Example log we are looking for
      # ISPN000136: Connection.Receiver [10.202.108.87:7600 - 10.202.108.77:37097]-24,ejb,ip-10-202-108-87" java.lang.OutOfMemoryError: Java heap space
      FilterPattern: '"OutOfMemoryError: Java heap space"'
      MetricTransformations:
        -
          MetricValue: '1'
          MetricNamespace: !GetAtt CustomMetricConstants.Namespace
          MetricName: !GetAtt CustomMetricConstants.JVMOutOfMemoryMetricName
  ECSMemoryAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Alarm when ECS instance allotted memory is greater than 70%.
      AlarmActions:
      - Ref: AlarmSnsTopic
      MetricName: MemoryUtilization
      Namespace: AWS/ECS
      Statistic: Average
      Period: 60
      EvaluationPeriods: 1
      Threshold: 70
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
      - Name: ClusterName
        Value: !Ref Cluster
      - Name: ServiceName
        Value: !GetAtt FargateService.Name
  UnhealthyHostCountAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Alarm when there is any unhealthy target. 
      AlarmActions:
      - Ref: AlarmSnsTopic
      MetricName: UnHealthyHostCount
      Namespace: AWS/ApplicationELB
      Statistic: Sum
      Period: 60
      EvaluationPeriods: 1
      Threshold: 0
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
      - Name: TargetGroup
        Value: !GetAtt TargetGroup.TargetGroupFullName
      - Name: LoadBalancer
        Value: !GetAtt LoadBalancer.LoadBalancerFullName
  AlarmSnsTopic:
    Type: AWS::SNS::Topic

  # Will reintroduce whenever i can get scaling reliably working :/
  # Seemed okay till stage and then caused itself a bit of a broadcast storm
  # between scaling and the jdbc_ping clustering

  # AutoScalingRole:
  #   Type: AWS::IAM::Role
  #   Properties:
  #     AssumeRolePolicyDocument:
  #       Statement:
  #         - Effect: Allow
  #           Principal:
  #             Service: ecs-tasks.amazonaws.com
  #           Action: 'sts:AssumeRole'
  #     ManagedPolicyArns:
  #       - 'arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceAutoscaleRole'

  # AutoScalingTarget:
  #   Type: AWS::ApplicationAutoScaling::ScalableTarget
  #   Properties:
  #     MinCapacity: 1
  #     MaxCapacity: 5
  #     ResourceId: !Sub "service/${Cluster}/${FargateService.Name}"
  #     ScalableDimension: ecs:service:DesiredCount
  #     ServiceNamespace: ecs
  #     RoleARN: !GetAtt AutoScalingRole.Arn

  # ScalingPolicyCPU:
  #   Type: AWS::ApplicationAutoScaling::ScalingPolicy
  #   Properties:
  #     PolicyName: !Sub ${FargateService.Name}-cpu
  #     PolicyType: TargetTrackingScaling
  #     ScalingTargetId: !Ref AutoScalingTarget
  #     TargetTrackingScalingPolicyConfiguration:
  #       PredefinedMetricSpecification:
  #         PredefinedMetricType: ECSServiceAverageCPUUtilization
  #       ScaleInCooldown: 20
  #       ScaleOutCooldown: 20
  #       TargetValue: 35.0

  # ScalingPolicyMemory:
  #   Type: AWS::ApplicationAutoScaling::ScalingPolicy
  #   Properties:
  #     PolicyName: !Sub ${FargateService.Name}-memory
  #     PolicyType: TargetTrackingScaling
  #     ScalingTargetId: !Ref AutoScalingTarget
  #     TargetTrackingScalingPolicyConfiguration:
  #       PredefinedMetricSpecification:
  #         PredefinedMetricType: ECSServiceAverageMemoryUtilization
  #       ScaleInCooldown: 20
  #       ScaleOutCooldown: 20
  #       TargetValue: 50.0

  FargateService:
    Type: AWS::ECS::Service
    DependsOn:
      - LoadBalancerListenerHttps
    Properties:
      Cluster: !GetAtt Cluster.Arn
      PropagateTags: SERVICE
      DesiredCount: !Ref DesiredTaskCount
      TaskDefinition: !Ref TaskDefinition
      LaunchType: FARGATE
      PlatformVersion: 1.4.0
      HealthCheckGracePeriodSeconds: 420
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref AppSecurityGroup
          Subnets:
            - !Ref KeycloakAppSubnet1
            - !Ref KeycloakAppSubnet2
      LoadBalancers:
        - ContainerName: Navex-Keycloak
          ContainerPort: 8443
          TargetGroupArn: !Ref TargetGroup

  TaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub ${AWS::StackName}-KC
      RequiresCompatibilities:
        - FARGATE
      Memory: !FindInMap [StageToContainerResources, !Ref "Stage", TaskMemory]
      Cpu: !FindInMap [StageToContainerResources, !Ref "Stage", TaskCpu]
      NetworkMode: awsvpc
      ExecutionRoleArn: !GetAtt TaskExecutionRole.Arn
      TaskRoleArn: !Ref ECSTaskRole
      ContainerDefinitions:
        - Name: Navex-Keycloak
          Image: !Ref KeyCloakImage

          Essential: true
          PortMappings:
            - ContainerPort: 8443
            - ContainerPort: 7600
            - ContainerPort: 57600
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref AWS::Region
              awslogs-group: !Ref LogGroup
              awslogs-stream-prefix: kc-app
          Environment:
            - Name: DB_ADDR
              Value: !GetAtt DbStrings.EndPoint
            - Name: DB_PORT
              Value: !GetAtt DbStrings.Port
            - Name: DB_USER
              Value: !GetAtt DbUser.Name
            - Name: DB_VENDOR
              Value: postgres
            - Name: DB_DATABASE
              Value: postgres
            - Name: JAVA_OPTS
              Value: !Sub 
                - '-Xms64m -Xmx${MaxJvmHeap} -XX:MetaspaceSize=96M -XX:MaxMetaspaceSize=256m -Djava.net.preferIPv4Stack=true -Djboss.modules.system.pkgs=org.jboss.byteman -Djava.awt.headless=true'
                - MaxJvmHeap: !FindInMap [StageToContainerResources, !Ref "Stage", MaxJvmHeap]
            - Name: PROXY_ADDRESS_FORWARDING
              Value: "true"
            - Name: JGROUPS_TRANSPORT_STACK
              Value: tcp
            - Name: JGROUPS_DISCOVERY_PROTOCOL
              Value: JDBC_PING
            - Name: JGROUPS_DISCOVERY_PROPERTIES 
              Value: datasource_jndi_name=java:jboss/datasources/KeycloakDS
            - Name: DISCOVER_IP
              Value: aws
            - Name: NEW_RELIC_APP_NAME
              Value: !Sub ${AWS::StackName} (${AWS::Region}) - ${AWS::AccountId} 
            - Name: NEW_RELIC_AGENT_ENABLED
              Value: !If [ EnableNewRelicAgent, 'true', 'false' ] 
            - Name: MOONWATCH_API_BASE_URL
              Value: !Ref MoonwatchApiBaseUrl
            - Name: AWS_MW_REGION
              Value: !Ref MoonwatchApiRegion
            - Name: CACHE_OWNERS
              Value: !Ref InfiniSpanCacheOwners
            - !If
              - Development
              - Name: X509_CA_BUNDLE
                Value: "/CA_bundle/*.cer"
              - !Ref AWS::NoValue
          Secrets:
            - Name: DB_PASSWORD
              ValueFrom: !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter${DbStrings.SsmPath}
            - !If
                - EnableNewRelicAgent
                -
                    Name: NEW_RELIC_LICENSE_KEY
                    ValueFrom: !Ref NewRelicLicenseKeySsmArn
                - !Ref "AWS::NoValue"
            - Name: LAUNCH_DARKLY_KEY
              ValueFrom: !Ref LaunchDarklySdkKeySsmValue
          EntryPoint:
            - /opt/jboss/tools/start.sh

  ImportConfigTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub ${AWS::StackName}-KCCONFIG
      RequiresCompatibilities:
        - FARGATE
      Memory: !FindInMap [StageToContainerResources, !Ref "Stage", TaskMemory]
      Cpu: !FindInMap [StageToContainerResources, !Ref "Stage", TaskCpu]
      NetworkMode: awsvpc
      ExecutionRoleArn: !GetAtt TaskExecutionRole.Arn
      TaskRoleArn: !Ref ECSTaskRole
      Volumes:
        - Name: config
      ContainerDefinitions:
        - 
          Name: Navex-Keycloak-Config
          Image: !Ref KeyCloakImage
          Essential: true
          StartTimeout: 300
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref AWS::Region
              awslogs-group: !Ref LogGroup
              awslogs-stream-prefix: kc-config
          Environment:
            - Name: DB_ADDR
              Value: !GetAtt DbStrings.EndPoint
            - Name: DB_PORT
              Value: !GetAtt DbStrings.Port
            - Name: DB_USER
              Value: !GetAtt DbUser.Name
            - Name: DB_VENDOR
              Value: postgres
            - Name: DB_DATABASE
              Value: postgres
            - Name: NEW_RELIC_AGENT_ENABLED
              Value: 'false'
          Secrets:
            - Name: DB_PASSWORD
              ValueFrom: !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter${DbStrings.SsmPath}
          MountPoints:
            - ContainerPath: /import
              ReadOnly: true
              SourceVolume: config
          EntryPoint:
            - /opt/jboss/tools/start.sh
            - "-Dkeycloak.migration.action=import -Dkeycloak.migration.provider=dir -Dkeycloak.migration.dir=/import"
          DependsOn:
            - Condition: SUCCESS
              ContainerName: KC-Config-Importer
        -
          Name: KC-Config-Importer
          Image: mikesir87/aws-cli:latest
          Essential: false
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref AWS::Region
              awslogs-group: !Ref LogGroup
              awslogs-stream-prefix: kc-config
          Environment:
            - Name: S3_CONFIG_BUCKET
              Value: !Ref S3ConfigBucket
          MountPoints:
            - ContainerPath: /import
              ReadOnly: false
              SourceVolume: config
          Command:
            - /bin/sh
            - -c
            - aws s3 sync s3://$S3_CONFIG_BUCKET /import

  CpRunImportConfigTaskRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Policies:
        - PolicyName: EcsTaskCtl
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Resource:
                  - !Sub "arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:task-definition/${AWS::StackName}-KCCONFIG:*"
                  - !GetAtt Cluster.Arn
                Effect: Allow
                Action:
                  - ecs:RunTask
                  - ecs:StartTask
              - Resource: "*"
                Effect: Allow
                Action: 
                  - ecs:StopTask
                  - ecs:ListTasks
                Condition:
                  ArnEquals:
                    "ecs:cluster": !GetAtt Cluster.Arn
              - Resource: "*"
                Effect: Allow
                Action: 
                  - ecs:DescribeTaskDefinition
                  - ecs:DescribeTasks
              - Resource: !GetAtt LogGroup.Arn
                Action: logs:FilterLogEvents
                Effect: Allow
              - Resource:
                  - !GetAtt TaskExecutionRole.Arn
                  - !GetAtt ECSTaskRole.Arn
                Effect: Allow
                Action:
                  - iam:PassRole

  ConfigImporterSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: !Sub ${AWS::StackName}-configimporter
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: -1
          Description: "Everything to anywhere"
      VpcId:
        Fn::ImportValue:
          !Sub "${InfrastructureStackName}-VpcId"

  ConfigImporterSecurityGroupIngress:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      Description: "Allow traffic from self"
      GroupId: !GetAtt ConfigImporterSecurityGroup.GroupId
      IpProtocol: -1
      SourceSecurityGroupId: !GetAtt ConfigImporterSecurityGroup.GroupId

  CpRunImportConfigTaskLambda:
    Type: AWS::Lambda::Function
    Properties:
      # Explicit name to get around circular dep with role privs
      FunctionName: !Sub ${AWS::StackName}-CpRunImportTask
      Code: ./lambdas/kc-config-import/
      Runtime: python3.9
      Role: !GetAtt CpRunImportConfigTaskRole.Arn
      MemorySize: 256
      Timeout: 20
      Handler: kc_import_config.cp_handler
      Environment:
        Variables:
          Cluster: !GetAtt Cluster.Arn
          TaskDefinition: !Ref ImportConfigTaskDefinition
          #TaskFamily: !Sub ${AWS::StackName}-KCCONFIG
          TaskSubnets: !Sub ${KeycloakAppSubnet1},${KeycloakAppSubnet2}
          SecurityGroupId: !GetAtt ConfigImporterSecurityGroup.GroupId
          ImportConfigContainerName: 'Navex-Keycloak-Config'

  S3ConfigBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain

  ClientSecretRotateCloudwatchEvent:
    Type: AWS::Events::Rule
    Properties:
      Description: "Schedule keycloak client secret rotation"
      # more frequent rotation in lower environments so that we catch
      # clients who don't support the rotation scheme long before
      # stage/prod
      ScheduleExpression: !If [ Development, "rate(1 day)", "rate(7 days)" ]
      State: !If [ RotateClientSecret, ENABLED, DISABLED ]
      Targets:
        - Arn: !GetAtt CweClientSecretRotateLambda.Arn
          Id: "CweClientSecretRotateLambda"

  PermissionForEventsToInvokeCoiDataCleanupPurgeDormantInProgressResponsesSchedulerLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref CweClientSecretRotateLambda
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt ClientSecretRotateCloudwatchEvent.Arn

  # DefaultSecret exist in the source control config that is imported
  # it should only be valid for a second after a deploy hopefully...
  # We can probably get around this if needed, but it will be clunky i think
  ClientSecretRotationConstants:
    Type: Custom::VariableHack
    Metadata:
      cfn-lint:
        config:
          ignore_checks:
            - W2501
    Properties:
      ServiceToken: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:CfnVariableHack
      AdminClientId: admin-api-proxy
      AdminSecretSsmPath: !Sub /${AWS::StackName}/client-keys/master/admin-api-proxy
      SsmPrefix: !Sub /${AWS::StackName}/client-keys

  ClientSecretRotateLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: SsmParameterAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Resource: 
                  - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter${ClientSecretRotationConstants.SsmPrefix}/*"
                  - !Sub "arn:aws:kms:${AWS::Region}:${AWS::AccountId}:alias/aws/ssm" 
                Effect: Allow
                Action: 
                  - ssm:PutParameter
                  - kms:Encrypt
                  - kms:Decrypt
              - Resource: !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter${ClientSecretRotationConstants.AdminSecretSsmPath}"
                Effect: Allow
                Action: ssm:GetParameter
        - PolicyName: SNSPublishMessagePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Resource: 
                  - !Ref RotateSecretTopic
                Effect: Allow
                Action: 
                  - sns:Publish
    
  CweClientSecretRotateLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code: ./lambdas/kc-api-proxy/
      Runtime: python3.9
      Role: !GetAtt ClientSecretRotateLambdaRole.Arn
      MemorySize: 256
      Timeout: 60
      Handler: kc_api_proxy.cwe_rotate_handler
      Environment:
        Variables:
          KeyCloakBaseUrl: !Sub "https://navex.${Subdomain}.${DnsHostedZone}"
          AdminClientId: !GetAtt ClientSecretRotationConstants.AdminClientId
          AdminDefaultSecret: !Ref KeyCloakAdminApiDefaultSecret
          AdminSecretSsmPath: !GetAtt ClientSecretRotationConstants.AdminSecretSsmPath
          SsmPrefix: !GetAtt ClientSecretRotationConstants.SsmPrefix
          RotateSecretTopicArn: !Ref RotateSecretTopic

  LambdaKCApiProxyRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: SsmParameterAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Resource: 
                  - !Sub "arn:aws:kms:${AWS::Region}:${AWS::AccountId}:alias/aws/ssm" 
                Effect: Allow
                Action: 
                  - kms:Encrypt
                  - kms:Decrypt
              - Resource: !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter${ClientSecretRotationConstants.AdminSecretSsmPath}"
                Effect: Allow
                Action: ssm:GetParameter
              - Resource: "*"
                Effect: Allow
                Action: 
                  - ecs:DescribeTaskDefinition
              - Resource: !GetAtt LogGroup.Arn
                Action: logs:FilterLogEvents
                Effect: Allow
                  
  CweAlarmRemoveDuplicateUsersLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code: ./lambdas/kc-api-proxy/
      Runtime: python3.9
      Role: !GetAtt LambdaKCApiProxyRole.Arn
      MemorySize: 256
      Timeout: 60
      Handler: kc_api_proxy.cwe_remove_duplicant_users_alarm_handler
      Environment:
        Variables:
          KeyCloakBaseUrl: !Sub "https://navex.${Subdomain}.${DnsHostedZone}"
          AdminClientId: !GetAtt ClientSecretRotationConstants.AdminClientId
          AdminDefaultSecret: !Ref KeyCloakAdminApiDefaultSecret
          AdminSecretSsmPath: !GetAtt ClientSecretRotationConstants.AdminSecretSsmPath
          TaskDefinitionArn: !Ref TaskDefinition

  RemoveDuplicateUsersCloudwatchAlarmEvent:
    Type: AWS::Events::Rule
    Properties:
      Description: "Schedule keycloak client secret rotation"
      EventPattern: !Sub |
        {
          "source"      : ["aws.cloudwatch"],
          "detail-type" : ["CloudWatch Alarm State Change"],
          "detail"      : {
              "alarmName" : [ "${DuplicateUserIdAttemptedLoginAlarm}" ]
          }
        }
      State: ENABLED
      Targets:
        - Arn: !GetAtt CweAlarmRemoveDuplicateUsersLambda.Arn
          Id: "CweAlarmRemoveDuplicateUsersLambda"

  PermissionForEventsToInvokeCweAlarmRemoveDuplicateUsersLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref CweAlarmRemoveDuplicateUsersLambda
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt RemoveDuplicateUsersCloudwatchAlarmEvent.Arn

  GetUsersAlarmLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code: ./lambdas/kc-api-proxy/
      Runtime: python3.9
      Role: !GetAtt LambdaKCApiProxyRole.Arn
      MemorySize: 256
      Timeout: 60
      Handler: kc_api_proxy.check_get_users_endpoint
      Environment:
        Variables:
          KeyCloakBaseUrl: !Sub "https://navex.${Subdomain}.${DnsHostedZone}"
          AdminClientId: !GetAtt ClientSecretRotationConstants.AdminClientId
          AdminDefaultSecret: !Ref KeyCloakAdminApiDefaultSecret
          AdminSecretSsmPath: !GetAtt ClientSecretRotationConstants.AdminSecretSsmPath
          TaskDefinitionArn: !Ref TaskDefinition

  GetUsersAlarmEventRule:
    Type: AWS::Events::Rule
    Properties:
      Description: "Schedule get users to monitor keycloak health"
      ScheduleExpression: "rate(1 minute)"
      State: "ENABLED"
      Targets:
        - Arn: !GetAtt GetUsersAlarmLambda.Arn
          Id: "GetUsersAlarmLambda"

  PermissionForEventsToGetUsersAlarmLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref GetUsersAlarmLambda
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt GetUsersAlarmEventRule.Arn

  GetUsersErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmActions:
        - Ref: AlarmSnsTopic
      AlarmDescription: Alarm on logs that indicate that the get users api is failing and keycloak is possibly falling over
      ComparisonOperator: GreaterThanThreshold
      Threshold: 0
      DatapointsToAlarm: 1
      EvaluationPeriods: 1
      Dimensions:
        - Name: FunctionName
          Value: !Ref GetUsersAlarmLambda
      MetricName: "Errors"
      Namespace: AWS/Lambda
      Period: 60
      Statistic: Sum
      TreatMissingData: notBreaching

  CpPostDeployLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code: ./lambdas/kc-api-proxy/
      Runtime: python3.9
      Role: !GetAtt ClientSecretRotateLambdaRole.Arn
      MemorySize: 256
      Timeout: 60
      Handler: kc_api_proxy.cp_post_deploy_handler
      Environment:
        Variables:
          KeyCloakBaseUrl: !Sub "https://navex.${Subdomain}.${DnsHostedZone}"
          AdminClientId: !GetAtt ClientSecretRotationConstants.AdminClientId
          AdminDefaultSecret: !Ref KeyCloakAdminApiDefaultSecret
          AdminSecretSsmPath: !GetAtt ClientSecretRotationConstants.AdminSecretSsmPath
          SsmPrefix: !GetAtt ClientSecretRotationConstants.SsmPrefix
          RotateSecretTopicArn: !Ref RotateSecretTopic

  Dns:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneName: !Sub "${DnsHostedZone}."
      Name: !Sub "*.${Subdomain}.${DnsHostedZone}."
      TTL: 900
      Type: CNAME
      ResourceRecords:
        - !GetAtt LoadBalancer.DNSName

  RootDns:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneName: !Sub "${DnsHostedZone}."
      Name: !Sub "${Subdomain}.${DnsHostedZone}."
      TTL: 900
      Type: CNAME
      ResourceRecords:
        - !GetAtt LoadBalancer.DNSName

  DbUser:
    Type: Custom::VariableHack
    Properties:
      ServiceToken: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:CfnVariableHack
      Name: postgres

  DbPassword:
    Type: Custom::GeneratedString
    Properties:
      ServiceToken: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:CfnGenString
      ExcludePunctuation: true
      Length: 30

  DbStrings:
    Type: Custom::VariableHack
    Properties:
      ServiceToken: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:CfnVariableHack
      EndPoint:
        !If
          - Development
          - !Sub ${DatabaseInstance.Endpoint.Address}
          - !Sub ${DatabaseCluster.Endpoint.Address}
      Port:
        !If
          - Development
          - !Sub ${DatabaseInstance.Endpoint.Port}
          - !Sub ${DatabaseCluster.Endpoint.Port}
      SsmPath: !Sub /${AWS::StackName}/db/password

  SsmDbPassword:
    Type: Custom::SsmCreateParameter
    Properties:
      ServiceToken:
        !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:cloudformation-set-ssm-param
      ParameterProperties:
        Name: !GetAtt DbStrings.SsmPath
        Value: !GetAtt DbPassword.Value
        Type: "SecureString"
        KeyId: "alias/aws/ssm"
        Overwrite: True

  DbClusterSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: !Sub ${AWS::StackName}-dbcluster
      SecurityGroupIngress:
        - CidrIp: !GetAtt AppCidrs.AZ1
          IpProtocol: "TCP"
          FromPort: 5432
          ToPort: 5432
          Description: !Sub "KeyCloak AZ1 (${KeycloakAppSubnet1})"
        - CidrIp: !GetAtt AppCidrs.AZ2
          IpProtocol: "TCP"
          FromPort: 5432
          ToPort: 5432
          Description: !Sub "KeyCloak AZ2 (${KeycloakAppSubnet2})"
        - CidrIp: !GetAtt Cidrs.KCDBAZ1
          IpProtocol: "TCP"
          FromPort: 5432
          ToPort: 5432
          Description: !Sub "KeyCloak DB AZ1 (${KeyCloakDbSubnet1})"
        - CidrIp: !GetAtt Cidrs.KCDBAZ2
          IpProtocol: "TCP"
          FromPort: 5432
          ToPort: 5432
          Description: !Sub "KeyCloak DB AZ2 (${KeyCloakDbSubnet2})"
      VpcId:
        Fn::ImportValue:
          !Sub "${InfrastructureStackName}-VpcId"

  DbaAccessSecurityGroupIngress:
    Condition: DbaAccess
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      Description: "External management for DBAs"
      GroupId: !Ref DbClusterSecurityGroup
      CidrIp: !Ref DbaAccessCidr
      IpProtocol: "TCP"
      FromPort: 5432
      ToPort: 5432

  DatabaseSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: CloudFormation managed DB subnet group.
      SubnetIds:
        - !Ref KeyCloakDbSubnet1
        - !Ref KeyCloakDbSubnet2

  DatabaseClusterParameterGroupPg12:
    Type: AWS::RDS::DBClusterParameterGroup
    Condition:  NotDevelopment
    Properties:
      Description: !Sub "Aurora PG Cluster Parameter Group for ${AWS::StackName}"
      Family: aurora-postgresql12
      Parameters:
        rds.force_ssl: 0

  DatabaseInstanceParameterGroupPg12:
    Type: AWS::RDS::DBParameterGroup
    Condition:  NotDevelopment
    Properties:
      Description: !Sub "Aurora PG DB Instance Parameter Group for ${AWS::StackName}"
      Family: aurora-postgresql12
      Parameters:
        shared_preload_libraries: auto_explain,pg_stat_statements,pg_hint_plan,pgaudit
        log_statement: "ddl"
        log_connections: "1"
        log_disconnections: "1"
        log_lock_waits: "1"
        log_min_duration_statement: "5000"
        auto_explain.log_min_duration: "5000"
        auto_explain.log_verbose: "1"
        log_rotation_age: "1440"
        log_rotation_size: "102400"
        rds.log_retention_period: "10080"
        random_page_cost: "1"
        track_activity_query_size: "16384"
        idle_in_transaction_session_timeout: "7200000"
        statement_timeout: "7200000"
        search_path: '"$user",public'

  DatabaseMonitoringRole: 
    Type: AWS::IAM::Role
    Condition: NotDevelopment
    Properties: 
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - 
            Effect: "Allow"
            Principal: 
              Service: 
                - "monitoring.rds.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns: 
        - arn:aws:iam::aws:policy/service-role/AmazonRDSEnhancedMonitoringRole

  DatabaseCluster:
    Type: AWS::RDS::DBCluster
    Condition:  NotDevelopment
    DeletionPolicy: Snapshot
    UpdateReplacePolicy: Snapshot
    Properties:
      Engine: aurora-postgresql
      EngineVersion: "12.15"
      BackupRetentionPeriod: 35
      PreferredBackupWindow: 05:00-06:00
      PreferredMaintenanceWindow: mon:03:00-mon:04:00
      DBSubnetGroupName: !Ref DatabaseSubnetGroup
      VpcSecurityGroupIds:
        - !Ref DbClusterSecurityGroup
      DBClusterParameterGroupName: !Ref DatabaseClusterParameterGroupPg12
      MasterUsername: !GetAtt DbUser.Name
      MasterUserPassword: !GetAtt DbPassword.Value
      StorageEncrypted: true
      Port: 5432
      Tags:
        - Key: navex:backup
          Value: yes-please

  DatabasePrimaryInstance:
    Type: AWS::RDS::DBInstance
    Condition: NotDevelopment
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Metadata:
      cfn-lint:
        config:
          ignore_checks:
            - I3013
    Properties:
      Engine: aurora-postgresql
      DBClusterIdentifier:  !Ref DatabaseCluster
      DBInstanceClass: db.r6g.large
      DBSubnetGroupName: !Ref DatabaseSubnetGroup
      DBParameterGroupName: !Ref DatabaseInstanceParameterGroupPg12
      MonitoringInterval: 1
      MonitoringRoleArn: !GetAtt DatabaseMonitoringRole.Arn
      AutoMinorVersionUpgrade: false
      AllowMajorVersionUpgrade: true
      PubliclyAccessible: false
      EnablePerformanceInsights: true
      PerformanceInsightsRetentionPeriod: 731

  DatabaseSecondaryInstance:
    Type: AWS::RDS::DBInstance
    Condition: NotDevelopment
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Metadata:
      cfn-lint:
        config:
          ignore_checks:
            - I3013
    Properties:
      Engine: aurora-postgresql
      DBClusterIdentifier:  !Ref DatabaseCluster
      DBInstanceClass: db.r6g.large
      DBSubnetGroupName: !Ref DatabaseSubnetGroup
      DBParameterGroupName: !Ref DatabaseInstanceParameterGroupPg12
      MonitoringInterval: 1
      MonitoringRoleArn: !GetAtt DatabaseMonitoringRole.Arn
      AutoMinorVersionUpgrade: false
      AllowMajorVersionUpgrade: true
      PubliclyAccessible: false
      EnablePerformanceInsights: true
      PerformanceInsightsRetentionPeriod: 731

  DatabaseInstance:
    Type: AWS::RDS::DBInstance
    Condition: Development
    DeletionPolicy: Snapshot
    UpdateReplacePolicy: Snapshot
    Properties:
        Engine: postgres
        # Encryption at rest is supported on db.t2.small and larger i think
        # if we want to enable it for Dev stacks we need to up the instance class
        StorageEncrypted: false
        EngineVersion: "12.15"
        # if specifying a version explicitly apparently you should nuke the auto-upgrade
        # cause otherwise cfn can try to downgrade the db and blow up stack deployments
        AutoMinorVersionUpgrade: false
        AllowMajorVersionUpgrade: true
        AllocatedStorage: "5"
        DBInstanceClass: db.t3.micro
        DBSubnetGroupName: !Ref DatabaseSubnetGroup
        MasterUsername: !GetAtt DbUser.Name
        MasterUserPassword: !GetAtt DbPassword.Value
        VPCSecurityGroups:
          - !Ref DbClusterSecurityGroup
        PubliclyAccessible: false
        BackupRetentionPeriod: 7

  DatabaseCPUAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Database CPU utilization is over 80%.
      Namespace: AWS/RDS
      MetricName: CPUUtilization
      Unit: Percent
      Statistic: Average
      Period: 600
      EvaluationPeriods: 2
      Threshold: 80
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
        - Name: DBInstanceIdentifier
          Value: !If [Development, !Ref "DatabaseInstance", !Ref "DatabasePrimaryInstance" ]

  DatabaseMemoryAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Database freeable memory is under 64MB.
      Namespace: AWS/RDS
      MetricName: FreeableMemory
      Unit: Bytes
      Statistic: Average
      Period: 600
      EvaluationPeriods: 2
      Threshold: 67108864
      ComparisonOperator: LessThanOrEqualToThreshold
      Dimensions:
        - Name: DBInstanceIdentifier
          Value: !If [Development, !Ref "DatabaseInstance", !Ref "DatabasePrimaryInstance" ]

  DatabaseConnectionAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Database has a concerning amount of connections
      Namespace: AWS/RDS
      MetricName: DatabaseConnections
      Unit: Count
      Statistic: Average
      Period: 600
      EvaluationPeriods: 2
      Threshold: !If [ Development, 50, 150 ]
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
        - Name: DBInstanceIdentifier
          Value: !If [Development, !Ref "DatabaseInstance", !Ref "DatabasePrimaryInstance" ]

  DatabaseSecondaryCPUAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: NotDevelopment
    Properties:
      AlarmDescription: Database CPU utilization is over 80%.
      Namespace: AWS/RDS
      MetricName: CPUUtilization
      Unit: Percent
      Statistic: Average
      Period: 600
      EvaluationPeriods: 2
      Threshold: 80
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
        - Name: DBInstanceIdentifier
          Value: !Ref "DatabaseSecondaryInstance"

  DatabaseSecondaryMemoryAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: NotDevelopment
    Properties:
      AlarmDescription: Database freeable memory is under 64MB.
      Namespace: AWS/RDS
      MetricName: FreeableMemory
      Unit: Bytes
      Statistic: Average
      Period: 600
      EvaluationPeriods: 2
      Threshold: 67108864
      ComparisonOperator: LessThanOrEqualToThreshold
      Dimensions:
        - Name: DBInstanceIdentifier
          Value: !Ref "DatabaseSecondaryInstance"

  DatabaseSecondaryConnectionAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: NotDevelopment
    Properties:
      AlarmDescription: Database has a concerning amount of connections
      Namespace: AWS/RDS
      MetricName: DatabaseConnections
      Unit: Count
      Statistic: Average
      Period: 600
      EvaluationPeriods: 2
      Threshold: 150
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
        - Name: DBInstanceIdentifier
          Value: !Ref "DatabaseSecondaryInstance"

  KeyCloakDbSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Fn::ImportValue:
          !Sub "${InfrastructureStackName}-VpcId"
      AvailabilityZone: !Select [ 0, !GetAZs ]
      MapPublicIpOnLaunch: false
      CidrBlock: !GetAtt Cidrs.KCDBAZ1
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} [DB] (Private)

  KeyCloakDbSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Fn::ImportValue:
          !Sub "${InfrastructureStackName}-VpcId"
      AvailabilityZone: !Select [ 1, !GetAZs ]
      MapPublicIpOnLaunch: false
      CidrBlock: !GetAtt Cidrs.KCDBAZ2
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} [DB] (Private)

  KeyCloakDbSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Fn::ImportValue:
          !Sub "${InfrastructureStackName}-PrivateRouteTableAZ1"
      SubnetId: !Ref KeyCloakDbSubnet1

  KeyCloakDbSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Fn::ImportValue:
          !Sub "${InfrastructureStackName}-PrivateRouteTableAZ2"
      SubnetId: !Ref KeyCloakDbSubnet2

  RotateSecretTopic:
    Type: AWS::SNS::Topic

Outputs:
  Domain:
    Description: domain to KC service
    Value: !Ref Dns
  RootDomain:
    Description: domain to KC service without string substitution
    Value: !Ref RootDns
  ConfigBucket:
    Value: !Ref S3ConfigBucket
  CpConfigImportLambdaArn:
    Value: !GetAtt CpRunImportConfigTaskLambda.Arn
  CpPostDeployLambdaArn:
    Value: !GetAtt CpPostDeployLambda.Arn
  ClientSecretSsmPrefix:
    Value: !GetAtt ClientSecretRotationConstants.SsmPrefix
  ClientSecretSsmRegion:
    Value: !Ref AWS::Region
  ClientSecretSsmKmsArn:
    Value: !Sub "arn:aws:kms:${AWS::Region}:${AWS::AccountId}:alias/aws/ssm"
  RotateSecretTopicArn:
    Value: !Ref RotateSecretTopic
  NcisApiClientSecretSsmArn:
    Value: !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter${ClientSecretRotationConstants.SsmPrefix}/navex/ncis-api"
  CmdBackendClientSecretSsmArn:
    Value: !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter${ClientSecretRotationConstants.SsmPrefix}/navex/cmd-backend"
  EpimIemClientSecretSsmArn:
    Value: !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter${ClientSecretRotationConstants.SsmPrefix}/navex/epim-iem"
  EpimS2SClientSecretSsmArn:
    Value: !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter${ClientSecretRotationConstants.SsmPrefix}/navex/epim-s2s"
  EpadminClientSecretSsmArn:
    Value: !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter${ClientSecretRotationConstants.SsmPrefix}/navex/epadmin"
  InsightsClientSecretSsmArn:
    Value: !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter${ClientSecretRotationConstants.SsmPrefix}/navex/insights"
  RiskRateClientSecretSsmArn:
    Value: !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter${ClientSecretRotationConstants.SsmPrefix}/navex/riskrate"
  RiskRateBackendClientSecretSsmArn:
    Value: !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter${ClientSecretRotationConstants.SsmPrefix}/navex/riskrate-backend"
  AppShellBffClientSecretSsmArn:
    Value: !Sub "arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter${ClientSecretRotationConstants.SsmPrefix}/navex/appshell-bff"
  MoonwatchSecretSsmArn:
    Value: !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter${ClientSecretRotationConstants.SsmPrefix}/navex/moonwatch-api-proxy"
  CustomerManagerClientSecretSsmArn:
    Value: !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter${ClientSecretRotationConstants.SsmPrefix}/navex/customermanager"
  CoiBackendClientSecretSsmArn:
    Value: !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter${ClientSecretRotationConstants.SsmPrefix}/navex/coi-backend"
  CoursecustomizerBackendClientSecretSsmArn:
    Value: !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter${ClientSecretRotationConstants.SsmPrefix}/navex/coursecustomizer-backend"
  MyTaskListApiClientSecretSSmArn:
    Value: !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter${ClientSecretRotationConstants.SsmPrefix}/navex/my-task-list-api"
  NavexOneClientSecretSsmArn:
    Value: !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter${ClientSecretRotationConstants.SsmPrefix}/navex/navexone"
  NavexAdminClientSecretSsmArn:
    Value: !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter${ClientSecretRotationConstants.SsmPrefix}/navex/navexadmin"
  PitaClientSecretSsmArn:
    Value: !Sub "arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter${ClientSecretRotationConstants.SsmPrefix}/navex/pita"
  FoundationServiceClientSecretSsmArn:
    Value: !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter${ClientSecretRotationConstants.SsmPrefix}/navex/foundation-service-client"
  DoormanClientSecretSsmArn:
    Value: !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter${ClientSecretRotationConstants.SsmPrefix}/navex/doorman"
  TenantSyncClientSecretArn:
    Value: !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter${ClientSecretRotationConstants.SsmPrefix}/navex/tenant-sync"
  FivetranOnboardingClientSecretArn:
    Value: !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter${ClientSecretRotationConstants.SsmPrefix}/navex/fivetran-onboarding"
  AssessmentBackendSecretSsmArn:
    Value: !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter${ClientSecretRotationConstants.SsmPrefix}/navex/assessment-backend"
  AuthZServiceClientSecretSsmArn:
    Value: !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter${ClientSecretRotationConstants.SsmPrefix}/navex/authz-service"
  ASMServiceToServiceSecretSsmArn:
    Value: !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter${ClientSecretRotationConstants.SsmPrefix}/navex/asm-service-to-service"
  OrganizationClientSecretSsmArn:
    Value: !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter${ClientSecretRotationConstants.SsmPrefix}/navex/organization"
  PitaBackendClientSecretSsmArn:
    Value: !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter${ClientSecretRotationConstants.SsmPrefix}/navex/pita-backend"
  UserstoreClientSecretSsmArn:
    Value: !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter${ClientSecretRotationConstants.SsmPrefix}/navex/userstore"


