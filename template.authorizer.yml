AWSTemplateFormatVersion: 2010-09-09
Transform: 'AWS::Serverless-2016-10-31'
Description: Lambda Authorizer for securing APIs.

Metadata:
  cfn-lint:
    config:
      ignore_checks:
        - W3002
        - I3042

Parameters:
  KCBaseUrl:
    Type: String
    Default: "*.keycloak.devlocal.navex-pe.com:8443"
  LayerName:
    Type: String
    Default: oidc-endpoint-authorizer-nodejs
  StackDeploymentPurpose:
    Type: String
    Default: pipeline
    AllowedValues:
      - pipeline # will publish its layer name to ssm, for pipeline stack deploys
      - story # will not publish layer name to ssm, for one-off story stack deploys

Outputs:
  CustomOidcAuthorizerLambdaName:
    Value: !Ref CustomOidcAuthorizerLambda
  ApiGatewayAuthorizerRole:
    Value: !Ref ApiGatewayAuthorizerRole
  LayerName:
    Value: !Ref LayerName
  LayerArn:
    Value: !If
      - IsPipelineStack
      - !GetAtt LayerArnSetSsm.Value
      - !Ref AuthorizerLayer

Conditions:
  IsPipelineStack: !Equals
    - !Ref StackDeploymentPurpose
    - "pipeline"

Resources:
  CustomOidcAuthorizerLambda:
    Type: AWS::Lambda::Function
    Properties:
      Role: !GetAtt LambdaExecutionRole.Arn
      Code: ./lambdas/oidc-custom-authorizer/
      Handler: index.handler
      Description: Authorize Endpoints for KeyCloak
      Environment:
        Variables:
          JWKS_URI: !Sub https://${KCBaseUrl}/auth/realms/navex/protocol/openid-connect/certs
      MemorySize: 256
      Runtime: nodejs14.x
      Timeout: 30
      Layers:
        - !If
          - IsPipelineStack
          - !GetAtt LayerArnSetSsm.Value
          - !Ref AuthorizerLayer

  CustomOidcAuthorizerLambdaPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref CustomOidcAuthorizerLambda
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:*"
  
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  ApiGatewayAuthorizerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - Effect: "Allow"
            Principal: 
              Service: "apigateway.amazonaws.com"
            Action: sts:AssumeRole
      Policies: 
        - PolicyName: "InvokeAuthorizerFunction"
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
              - Effect: "Allow"
                Action:
                  - lambda:InvokeAsync
                  - lambda:InvokeFunction
                Resource: !GetAtt CustomOidcAuthorizerLambda.Arn
  AuthorizerLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      CompatibleRuntimes:
        - nodejs12.x
        - nodejs14.x
      ContentUri: ./lambdas/oidc-authorizer-layer/output/
      LayerName: !Ref LayerName
      RetentionPolicy: Retain

  LayerArnSetSsm:
    Type: AWS::SSM::Parameter
    Condition: IsPipelineStack
    Properties:
      Name: !Sub /mobile/lambda-code/layers/${LayerName}/arn
      Description: !Sub Amazon Resource Name of the ${LayerName} lambda layer.
      Type: String
      Value: !Ref AuthorizerLayer